<%# DON'T EDIT THIS FILE -- the canonical version is under the frontend project %>

(function (exports) {
    "use strict";

    /************************************************************************/
    /* Tree ID helpers  */
    /************************************************************************/
    var TreeIds = {}

    TreeIds.uri_to_tree_id = function (uri) {
        var parts = TreeIds.uri_to_parts(uri);
        return parts.type + '_' + parts.id;
    }

    TreeIds.uri_to_parts = function (uri) {
        var last_part = uri.replace(/\/repositories\/[0-9]+\//,"");
        var bits = last_part.match(/([a-z_]+)\/([0-9]+)/);
        var type_plural = bits[1].replace(/\//g,'_');
        var id = bits[2];
        var type = type_plural.replace(/s$/, '');

        return {
            type: type,
            id: id
        };
    }

    TreeIds.backend_uri_to_frontend_uri = function (uri) {
        return AS.app_prefix(uri.replace(/\/repositories\/[0-9]+\//, ""))
    }

    TreeIds.parse_tree_id = function (tree_id) {
        var regex_match = tree_id.match(/([a-z_]+)([0-9]+)/);
        if (regex_match == null || regex_match.length != 3) {
            return;
        }

        var row_type = regex_match[1].replace(/_$/, "");
        var row_id = regex_match[2];

        return {type: row_type, id: row_id}
    }

    TreeIds.link_url = function(uri) {
        // convert the uri into tree-speak
        return "#tree::" + TreeIds.uri_to_tree_id(uri);
    };

    exports.TreeIds = TreeIds
    /************************************************************************/


    var SCROLL_DELAY_MS = 100;
    var THRESHOLD_EMS = 300;

    function LargeTree(datasource, container, root_uri, read_only, renderer, tree_loaded_callback, node_selected_callback) {
        this.source = datasource;
        this.elt = container;
        this.scrollTimer = undefined;
        this.renderer = renderer;

        this.progressIndicator = $('<progress class="largetree-progress-indicator" />');
        this.elt.before(this.progressIndicator);

        this.elt.css('will-change', 'transform');

        this.root_uri = root_uri;
        this.root_tree_id = TreeIds.uri_to_tree_id(root_uri);

        // default to the root_id
        this.current_tree_id = this.root_tree_id;

        this.read_only = read_only;

        this.waypoints = {};

        this.node_selected_callback = node_selected_callback;
        this.populateWaypointHooks = [];
        this.collapseNodeHooks = [];

        this.errorHandler = $.noop;

        this.initEventHandlers();
        this.renderRoot(function () {
            tree_loaded_callback();
        });
    }

    LargeTree.prototype.setGeneralErrorHandler = function (callback) {
        this.errorHandler = callback;
    };

    LargeTree.prototype.currentlyLoading = function () {
        this.progressIndicator.css('visibility', 'visible');
    }

    LargeTree.prototype.doneLoading = function () {
        var self = this;
        setTimeout(function () {
            self.progressIndicator.css('visibility', 'hidden');
        }, 0);
    }


    LargeTree.prototype.addPlugin = function (plugin) {
        plugin.initialize(this);

        return plugin;
    };

    LargeTree.prototype.addPopulateWaypointHook = function (callback) {
        this.populateWaypointHooks.push(callback);
    };

    LargeTree.prototype.addCollapseNodeHook = function (callback) {
        this.collapseNodeHooks.push(callback);
    };

    LargeTree.prototype.displayNode = function (tree_id, done_callback) {
        var self = this;

        var node_id = TreeIds.parse_tree_id(tree_id).id;

        var displaySelectedNode = function () {
            var node = $('#' + tree_id);

            if (done_callback) {
                done_callback(node);
            }
        };

        if (tree_id === self.root_tree_id) {
            /* We don't need to do any fetching for the root node. */
            displaySelectedNode();
        } else {
            self.source.fetchPathFromRoot(node_id).done(function (paths) {
                self.recursivelyPopulateWaypoints(paths[node_id], displaySelectedNode);
            });
        }
    };

    LargeTree.prototype.reparentNodes = function (new_parent, nodes, position) {
        var self = this;

        if (!self.isReparentAllowed(nodes, new_parent)) {
            // This move is not allowed!
            // alert user
            AS.openQuickModal("<%= I18n.t('largetree.reparent_error.title') %>",
                              "<%= I18n.t('largetree.reparent_error.message') %>")

            return {
                'done' : $.noop
            };
        }

        var scrollPosition = self.elt.scrollTop();
        var loadingMask = self.displayLoadingMask(scrollPosition)

        var parent_uri = new_parent.data('uri');

        if (!parent_uri) {
            parent_uri = this.root_uri;
        }

        if (position) {
            /* If any of the nodes we're moving were originally siblings that
            fall before the drop target, we need to adjust the position for the
            fact that everything will "shift up" when they're moved */
            var positionAdjustment = 0;

            $(nodes).each(function (idx, elt) {
                var level = $(elt).data('level');
                var node_parent_uri = $(elt).prevAll('.indent-level-' + (level - 1) + ':first').data('uri');

                if (!node_parent_uri) {
                    node_parent_uri = self.root_uri;
                }

                if (node_parent_uri == parent_uri && $(elt).data('position') < position) {
                    positionAdjustment += 1;
                }
            });

            position -= positionAdjustment;
        } else {
            position = 0;
        }

        /* Record some information about the current state of the tree so we can
           revert things to more-or-less how they were once we reload. */
        var uris_to_reopen = [];


        /* Refresh the drop target */
        if (new_parent.data('uri') && !new_parent.is('.root-row')) {
            uris_to_reopen.push(new_parent.data('uri'));
        }

        /* Reopen the parent of any nodes we dragged from */
        $(nodes).each(function (idx, elt) {
            var level = $(elt).data('level');
            var parent_uri = $(elt).prevAll('.indent-level-' + (level - 1) + ':first').data('uri');

            if (parent_uri) {
                uris_to_reopen.push(parent_uri);
            } else {
                /* parent was root node */
            }
        });

        /* Reopen any other nodes that were open */
        self.elt.find('.expandme .expanded').closest('tr').each(function (idx, elt) {
            uris_to_reopen.push($(elt).data('uri'));
        });

        var uris_to_move = [];
        $(nodes).each(function (_, elt) {
            uris_to_move.push($(elt).data('uri'));
        });

        return this.source.reparentNodes(parent_uri,
                                         uris_to_move,
                                         position)
            .done(function () {
                self.redisplayAndShow(uris_to_reopen, function () {
                    self.considerPopulatingWaypoint(function () {
                        self.elt.animate({
                            scrollTop: scrollPosition
                        }, function(){
                            loadingMask.remove();
                        });

                        $(nodes).each(function (i, node) {
                            var id = $(node).attr('id');
                            self.elt.find('#' + id).addClass('reparented-highlight');

                            setTimeout(function () {
                                self.elt.find('#' + id).removeClass('reparented-highlight').addClass('reparented');
                            }, 500);
                        });
                    });
                });
            });
    };

    LargeTree.prototype.displayLoadingMask = function (scrollPosition) {
        var self = this;

        var loadingMask = self.elt.clone(false);

        loadingMask.on('click', function (e) { e.preventDefault(); return false; });

        loadingMask.find('*').removeAttr('id');
        loadingMask.attr('id', 'tree-container-loading');
        loadingMask.css('z-index', 2000)
                   .css('position', 'absolute')
                   .css('left', self.elt.offset().left)
                   .css('top', self.elt.offset().top);

        loadingMask.width(self.elt.width());

        var spinner = $('<div class="spinner" />');
        spinner.css('font-size', '50px')
               .css('display', 'inline')
               .css('z-index', 2500)
               .css('position', 'fixed')
               .css('margin', 0)
               .css('left', '50%')
               .css('top', '50%');


        $('body').prepend(loadingMask);
        $('body').prepend(spinner);

        loadingMask.scrollTop(scrollPosition);

        return {
            remove: function () {
                loadingMask.remove();
                spinner.remove();
            }
        };
    };

    LargeTree.prototype.redisplayAndShow = function(uris, done_callback) {
        var self = this;

        uris = $.unique(uris);

        if (!done_callback) {
            done_callback = $.noop;
        }

        self.renderRoot(function () {
            var uris_to_reopen = uris.slice(0)
            var displayedNodes = [];

            var handle_next_uri = function (node) {
                if (node) {
                    displayedNodes.push(node);
                }

                if (uris_to_reopen.length == 0) {
                    /* Finally, expand any nodes that haven't been expanded along the way */
                    var expand_next = function (done_callback) {
                        if (displayedNodes.length > 0) {
                            var node = displayedNodes.shift();
                            if (node.is('.root-row')) {
                                done_callback();
                            } else {
                                self.expandNode(node, function () {
                                    expand_next(done_callback);
                                });
                            }
                        } else {
                            done_callback();
                        }
                    };

                    return expand_next(function () {
                        return done_callback();
                    });
                }

                var uri = uris_to_reopen.shift();
                var tree_id = TreeIds.uri_to_tree_id(uri);

                self.displayNode(tree_id, handle_next_uri);
            };

            handle_next_uri();
        });
    };

    LargeTree.prototype.recursivelyPopulateWaypoints = function (path, done_callback) {
        var self = this;

        /*
           Here, `path` is a list of objects like:

             node: /some/uri; offset: NN

           which means "expand subtree /some/uri then populate waypoint NN".

           The top-level is special because we automatically show it as expanded, so we skip expanding the root node.
         */

        if (!path || path.length === 0) {
            done_callback();
            return;
        }

        var waypoint_description = path.shift();

        var next_fn = function () {
            if (!self.waypoints[waypoint_description.node]) {
                /* An error occurred while expanding. */
                debugger;
                return;
            }

            var waypoint = self.waypoints[waypoint_description.node][waypoint_description.offset];

            if (!waypoint) {
                /* An error occurred while expanding. */
                debugger;
                return;
            }

            self.populateWaypoint(waypoint, function () {
                self.recursivelyPopulateWaypoints(path, done_callback);
            });
        };

        if (waypoint_description.node) {
            var tree_id = TreeIds.uri_to_tree_id(waypoint_description.node);

            if ($('#' + tree_id).find('.expandme').find('.expanded').length > 0) {
                next_fn();
            } else {
                self.toggleNode($('#' + tree_id).find('.expandme'), next_fn);
            }
        } else {
            /* this is the root node (subtree already expanded) */
            next_fn();
        }
    };

    LargeTree.prototype.deleteWaypoints = function (parent) {
        var waypoint = parent.next();

        if (!waypoint.hasClass('waypoint')) {
            /* Nothing left to burn */
            return false;
        }

        if (!waypoint.hasClass('populated')) {
            waypoint.remove();

            return true;
        }

        var waypointLevel = waypoint.data('level');

        if (!waypointLevel) {
            return false;
        }

        /* Delete all elements up to and including the end waypoint marker */
        while (true) {
            var elt = waypoint.next();

            if (elt.length === 0) {
                break;
            }

            if (elt.hasClass('end-marker') && waypointLevel == elt.data('level')) {
                elt.remove();
                break;
            } else {
                elt.remove();
            }
        }

        waypoint.remove();

        return true;
    };

    LargeTree.prototype.toggleNode = function (button, done_callback) {
        var self = this;
        var parent = button.closest('tr');

        if (button.data('expanded')) {
            self.collapseNode(parent, done_callback);
        } else {
            self.expandNode(parent, done_callback);
        }
    };

    LargeTree.prototype.expandNode = function (row, done_callback) {
        var self = this;
        var button = row.find('.expandme');

        if (button.data('expanded')) {
            if (done_callback) {
                done_callback();
            }
            return;
        }

        button.find('.expandme-icon').addClass('expanded');
        $(button).data('expanded', true);

        if (!row.data('uri')) {
            debugger;
        }

        self.source.fetchNode(row.data('uri'))
            .done(function (node) {
                self.appendWaypoints(row, row.data('uri'), node.waypoints, node.waypoint_size, row.data('level') + 1);

                if (done_callback) {
                    done_callback();
                }
            })
            .fail(function () {
                self.errorHandler.apply(self, ['fetch_node_failed'].concat([].slice.call(arguments)));
            });
    };

    LargeTree.prototype.collapseNode = function (row, done_callback) {
        var self = this;

        while (self.deleteWaypoints(row)) {
            /* Remove the elements from one or more waypoints */
        }

        var button = row.find('.expandme');

        $(button).data('expanded', false);
        button.find('.expandme-icon').removeClass('expanded');

        /* Removing elements might have scrolled something else into view */
        setTimeout(function () {
            self.considerPopulatingWaypoint();
        }, 0);

        $(self.collapseNodeHooks).each(function (idx, hook) {
            hook();
        });

        if (done_callback) {
            done_callback();
        }
    };

    LargeTree.prototype.initEventHandlers = function () {
        var self = this;
        var currentlyExpanding = false;

        /* Content loading */
        this.elt.on('scroll', function (event) {
            if (self.scrollTimer) {
                clearTimeout(self.scrollTimer);
            }

            var handleScroll = function () {
                if (!currentlyExpanding) {
                    currentlyExpanding = true;

                    self.considerPopulatingWaypoint(function () {
                        currentlyExpanding = false;
                    });
                }
            };

            self.scrollTimer = setTimeout(handleScroll, SCROLL_DELAY_MS);
        });

        /* Expand/collapse nodes */
        $(this.elt).on('click', '.expandme', function (e) {
            e.preventDefault();
            self.toggleNode($(this));
        });
    };

    LargeTree.prototype.makeWaypoint = function (uri, offset, indentLevel) {
        var result = $('<tr class="waypoint" />');
        result.addClass('indent-level-' + indentLevel);

        result.data('level', indentLevel);
        result.data('uri', uri);
        result.data('offset', offset);

        if (!this.waypoints[uri]) {
            this.waypoints[uri] = {};
        }

        /* Keep a lookup table of waypoints so we can find and populate them programmatically */
        this.waypoints[uri][offset] = result;

        return result;
    };

    LargeTree.prototype.appendWaypoints = function (elt, parentURI, waypointCount, waypointSize, indentLevel) {
        var child_count = elt.data('child_count');
        for (var i = waypointCount - 1; i >= 0; i--) {
            var waypoint = this.makeWaypoint(parentURI, i, indentLevel);

            waypoint.data('child_count_at_this_level', child_count);

            /* We force the line height to a constant 2em so we can predictably
               guess how tall to make waypoints.  See largetree.less for where we
               set this on table.td elements. */
            waypoint.css('height', (waypointSize * 2) + 'em');
            elt.after(waypoint);
        }

        var self = this;
        setTimeout(function () {self.considerPopulatingWaypoint(); }, 0);
    };

    LargeTree.prototype.renderRoot = function (done_callback) {
        var self = this;
        self.waypoints = {};

        var rootList = $('<table class="root" />');

        this.source.fetchRootNode().done(function (rootNode) {
            var row = self.renderer.get_root_template();

            row.data('uri', rootNode.uri);
            row.attr('id', TreeIds.uri_to_tree_id(rootNode.uri));
            row.addClass('root-row');
            row.data('level', 0);
            row.data('child_count', rootNode.child_count);
            row.data('jsonmodel_type', rootNode.jsonmodel_type);
            row.find('.title').append($('<a>').attr('href', TreeIds.link_url(rootNode.uri))
                                              .addClass('record-title')
                                              .text(rootNode.title));

            rootList.append(row);
            self.appendWaypoints(row, null, rootNode.waypoints, rootNode.waypoint_size, 1);

            /* Remove any existing table */
            self.elt.find('table.root').remove();

            self.elt.prepend(rootList);
            self.renderer.add_root_columns(row, rootNode);
            if (done_callback) {
                done_callback();
            }
        });
    };

    LargeTree.prototype.considerPopulatingWaypoint = function (done_callback) {
        var self = this;

        if (!done_callback) {
            done_callback = $.noop;
        }

        var emHeight = parseFloat($("body").css("font-size"));
        var threshold_px = emHeight * THRESHOLD_EMS;
        var containerTop = this.elt.offset().top;
        var containerHeight = this.elt.outerHeight();

        /* Pick a reasonable guess at which waypoint we might want to populate
           (based on our scroll position) */
        var allWaypoints = self.elt.find('.waypoint');

        if (allWaypoints.length == 0) {
            done_callback();
            return;
        }

        var scrollPercent = self.elt.scrollTop() / self.elt.find('table.root').height();
        var startIdx = Math.floor(scrollPercent * allWaypoints.length);

        var waypointToPopulate;
        var evaluateWaypointFn = function (elt) {
            /* The element's top is measured from the top of the page, but we
               want it relative to the top of the container.  Adjust as
               appropriate. */
            var eltTop = elt.offset().top - containerTop;
            var eltBottom = eltTop + elt.height();

            var waypointVisible = (Math.abs(eltTop) <= (containerHeight + threshold_px)) ||
                                  (Math.abs(eltBottom) <= (containerHeight + threshold_px)) ||
                                  (eltTop < 0 && eltBottom > 0);

            if (waypointVisible) {
                var candidate = {
                    elt: elt,
                    top: eltTop,
                    level: elt.data('level'),
                };

                if (!waypointToPopulate) {
                    waypointToPopulate = candidate;
                } else {
                    if (waypointToPopulate.level > candidate.level || waypointToPopulate.top > candidate.top) {
                        waypointToPopulate = candidate;
                    }
                }

                return true;
            } else {
                return false;
            }
        };

        /* Search for a waypoint by scanning backwards */
        for (var i = startIdx; i >= 0; i--) {
            var waypoint = $(allWaypoints[i]);

            if (waypoint.hasClass('populated')) {
                /* nothing to do for this one */
                continue;
            }

            var waypointWasVisible = evaluateWaypointFn(waypoint);

            if (!waypointWasVisible && i < startIdx) {
                /* No point considering waypoints even further up in the DOM */
                break;
            }
        }

        /* Now scan forwards */
        for (var i = startIdx + 1; i < allWaypoints.length; i++) {
            var waypoint = $(allWaypoints[i]);

            if (waypoint.hasClass('populated')) {
                /* nothing to do for this one */
                continue;
            }

            var waypointWasVisible = evaluateWaypointFn(waypoint);

            if (!waypointWasVisible) {
                /* No point considering waypoints even further up in the DOM */
                break;
            }
        }

        if (waypointToPopulate) {
            self.currentlyLoading();
            self.populateWaypoint(waypointToPopulate.elt, function () {
                setTimeout(function () {
                    self.considerPopulatingWaypoint(done_callback);
                }, 0);
            });
        } else {
            self.doneLoading();
            done_callback();
        }
    };

    var activeWaypointPopulates = {};

    LargeTree.prototype.populateWaypoint = function (elt, done_callback) {
        if (elt.hasClass('populated')) {
            done_callback();
            return;
        }

        var self = this;
        var uri = elt.data('uri');
        var offset = elt.data('offset');
        var level = elt.data('level');

        var key = uri + "_" + offset;
        if (activeWaypointPopulates[key]) {
            return;
        }

        activeWaypointPopulates[key] = true;

        this.source.fetchWaypoint(uri, offset).done(function (nodes) {
            var endMarker = self.renderer.endpoint_marker();
            endMarker.data('level', level);
            endMarker.data('child_count_at_this_level', elt.data('child_count_at_this_level'));
            endMarker.addClass('indent-level-' + level);

            elt.after(endMarker);

            var newRows = [];
            var current = undefined;

            $(nodes).each(function (idx, node) {
                var row = self.renderer.get_node_template();

                row.addClass('largetree-node indent-level-' + level);
                row.data('level', level);
                row.data('child_count', node.child_count);

                var title = row.find('.title');
                var strippedTitle = $("<div>").html(node.title).text();
                title.append($('<a class="record-title" />').prop('href', TreeIds.link_url(node.uri)).text(node.title));
                title.attr('title', strippedTitle);

                var ex = row.find('.expandme');
                ex.attr('aria-label', 'expand element');
                if (node.child_count === 0) {
                    ex.css('visibility', 'hidden');
                    ex.attr('aria-hidden', 'true');
                }

                self.renderer.add_node_columns(row, node);

                var tree_id = TreeIds.uri_to_tree_id(node.uri);

                row.data('uri', node.uri);
                row.data('jsonmodel_type', node.jsonmodel_type);
                row.data('position', node.position);
                row.data('parent_id', node.parent_id);
                row.attr('id', tree_id);

                if (self.current_tree_id == tree_id) {
                    row.addClass('current');
                    current = row;
                } else {
                    row.removeClass('current');
                }

                newRows.push(row);
            });

            elt.after.apply(elt, newRows);

            elt.addClass('populated');

            activeWaypointPopulates[key] = false;

            $(self.populateWaypointHooks).each(function (idx, hook) {
                hook();
            });

            if (current) {
                $.proxy(self.node_selected_callback, self)(current, self);
            }

            done_callback();
        });
    };

    /*********************************************************************************/
    /* Data source */
    /*********************************************************************************/
    function TreeDataSource(baseURL) {
        this.url = baseURL.replace(/\/+$/, "");
    }


    TreeDataSource.prototype.urlFor = function (action) {
        return this.url + "/" + action;
    };

    TreeDataSource.prototype.fetchRootNode = function () {
        var self = this;

        return $.ajax(this.urlFor("root"),
                      {
                          method: "GET",
                          dataType: 'json',
                      })
                .done(function (rootNode) {
                    self.cachePrecomputedWaypoints(rootNode);
                });
    };

    TreeDataSource.prototype.fetchNode = function (uri) {
        var self = this;

        if (!uri) {
            throw "Node can't be empty!";
        }

        return $.ajax(this.urlFor("node"),
                      {
                          method: "GET",
                          dataType: 'json',
                          data: {
                              /* THINKME: Should rename node to node_uri?  S */
                              node: uri,
                          }
                      })
                .done(function (node) {
                    self.cachePrecomputedWaypoints(node);
                });
    };

    TreeDataSource.prototype.fetchPathFromRoot = function (node_id) {
        var self = this;

        return $.ajax(this.urlFor("node_from_root"),
                      {
                          method: "GET",
                          dataType: 'json',
                          data: {
                              node_ids: [node_id],
                          }
                      });
    };

    TreeDataSource.prototype.fetchWaypoint = function (uri, offset) {
        var cached = this.getPrecomputedWaypoint(uri, offset);

        if (cached) {
            return {
                done: function (callback) {
                    callback(cached);
                }
            };
        } else {
            return $.ajax(this.urlFor("waypoint"),
                          {
                              method: "GET",
                              dataType: 'json',
                              data: {
                                  node: uri,
                                  offset: offset,
                              }
                          });
        }
    };

    TreeDataSource.prototype.reparentNodes = function (new_parent_uri, node_uris, position) {
        var target = TreeIds.backend_uri_to_frontend_uri(new_parent_uri);

        return $.ajax(target + "/accept_children",
               {
                   method: 'POST',
                   data: {
                       children: node_uris,
                       index: position,
                   }
               });
    };

    var precomputedWaypoints = {};

    TreeDataSource.prototype.getPrecomputedWaypoint = function (uri, offset) {
        var result;

        if (uri === null) {
            uri = "";
        }

        if (precomputedWaypoints[uri] && precomputedWaypoints[uri][offset]) {
            result = precomputedWaypoints[uri][offset];
            precomputedWaypoints[uri] = {};
        }

        return result;
    };

    TreeDataSource.prototype.cachePrecomputedWaypoints = function (node) {
        $(Object.keys(node.precomputed_waypoints)).each(function (idx, uri) {
            precomputedWaypoints[uri] = node.precomputed_waypoints[uri];
        });
    };

    LargeTree.prototype.setCurrentNode = function(tree_id, callback) {
        $('#'+this.current_tree_id, this.elt).removeClass('current');
        this.current_tree_id = tree_id;

        if ($('#'+this.current_tree_id, this.elt).length == 1) {
            var current = $('#'+this.current_tree_id, this.elt);
            current.addClass('current');
            $.proxy(this.node_selected_callback, self)(current, this);
            if (callback) {
                callback();
            }
        } else {
            this.displayNode(this.current_tree_id, callback);
        }
    };

    LargeTree.prototype.isReparentAllowed = function(nodes_to_move, target_node) {
        var self = this;

        if (target_node.is('.root-row')) {
            // always able to drop onto root node
            return true;
        }

        var uris_to_check = [];
        uris_to_check.push(target_node.data('uri'));
        var level = target_node.data('level') - 1;
        var row = target_node;
        while (level > 0) {
            row = row.prevAll('.largetree-node.indent-level-' + level + ':first');
            uris_to_check.push(row.data('uri'));
            level -= 1;
        }

        var isAllowed = true;

        $(nodes_to_move).each(function (idx, selectedRow) {
            var uri = $(selectedRow).data('uri');
            if ($.inArray(uri, uris_to_check) >= 0) {
                isAllowed = false;
                return;
            }
        });

        return isAllowed;

    };


    exports.LargeTree = LargeTree;
    exports.TreeDataSource = TreeDataSource;

}(window));
