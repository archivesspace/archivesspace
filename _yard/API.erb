---
title: API Reference

language_tabs:
  - shell

toc_footers:
  - <a href='http://github.com/tripit/slate'>Documentation Powered by Slate</a>

includes:
  - errors

search: true
---

# Introduction

This is the documentation for the ArchivesSpace RESTful API. This documents the endpoints that are used by the backend server to edit records in the application.

This example API documentation page was created with [Slate](http://github.com/tripit/slate).

# Authentication

> To authorize, use this code:

<!--
```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```
-->

> Example Request:

```shell
# With shell, you can just pass the correct header with each request
curl -s -F password="admin" "http://localhost:8089/users/admin/login"
```

> Example Response:

```json
{
   "session":"9528190655b979f00817a5d38f9daf07d1686fed99a1d53dd2c9ff2d852a0c6e",
   "user":{
      "lock_version":6,
      "username":"admin",
      "name":"Administrator",
      "is_system_user":true,
      "create_time":"2015-05-08T13:10:06Z",
      "system_mtime":"2015-07-07T10:21:53Z",
      "user_mtime":"2015-07-07T10:21:53Z",
      "jsonmodel_type":"user",
      "groups":[

      ],
      "is_admin":true,
      "uri":"/users/1",
      "agent_record":{
         "ref":"/agents/people/1"
      },
      "permissions":{
         "/repositories/1":[
            "update_location_record",
            "delete_vocabulary_record",
            "update_subject_record",
            "delete_subject_record",
            "update_agent_record",
            "delete_agent_record",
            "update_vocabulary_record",
            "merge_subject_record",
            "merge_agent_record",
            "administer_system",
            "become_user",
            "cancel_importer_job",
            "create_repository",
            "delete_archival_record",
            "delete_classification_record",
            "delete_event_record",
            "delete_repository",
            "import_records",
            "index_system",
            "manage_agent_record",
            "manage_repository",
            "manage_subject_record",
            "manage_users",
            "manage_vocabulary_record",
            "mediate_edits",
            "merge_agents_and_subjects",
            "merge_archival_record",
            "suppress_archival_record",
            "system_config",
            "transfer_archival_record",
            "transfer_repository",
            "update_accession_record",
            "update_classification_record",
            "update_digital_object_record",
            "update_event_record",
            "update_resource_record",
            "view_all_records",
            "view_repository",
            "view_suppressed"
         ],
         "_archivesspace":[
            "administer_system",
            "become_user",
            "cancel_importer_job",
            "create_repository",
            "delete_archival_record",
            "delete_classification_record",
            "delete_event_record",
            "delete_repository",
            "import_records",
            "index_system",
            "manage_agent_record",
            "manage_repository",
            "manage_subject_record",
            "manage_users",
            "manage_vocabulary_record",
            "mediate_edits",
            "merge_agents_and_subjects",
            "merge_archival_record",
            "suppress_archival_record",
            "system_config",
            "transfer_archival_record",
            "transfer_repository",
            "update_accession_record",
            "update_classification_record",
            "update_digital_object_record",
            "update_event_record",
            "update_resource_record",
            "view_all_records",
            "view_repository",
            "view_suppressed",
            "update_location_record",
            "delete_vocabulary_record",
            "update_subject_record",
            "delete_subject_record",
            "update_agent_record",
            "delete_agent_record",
            "update_vocabulary_record",
            "merge_subject_record",
            "merge_agent_record"
         ]
      }
   }
}
```

> It's a good idea to save the "session" id, since this will be used for later requests.


Most requests to the ArchivesSpace backend requires a user to be authenticated.
This can be done with a simple POST request to the /users/:user_name/login
endpoint, with :user_name and :password parameters being supplied.

The JSON that is returned will have a session key, which can be stored and used
for other requests. Sessions will expire after an hour, although you can change this in your config.rb file.

# ArchivesSpace REST API
As of <%= @time.inspect %> the following REST endpoints exist in the master branch of the development repository:

<% @endpoints.each do | e | %>

## <%= e[:description]%>

<% example =  @examples[e[:uri]][e[:method].to_s] %>

<% if example %>

<% url_params = e[:params].map{|p| p[0] unless (e[:uri].include?("/:#{p[0]}") or (p[3] or {})[:body] or p[1] == :body_stream or ["repo_id", "id"].include?(p[0])) }.compact %>
<% request_uri = "http://localhost:8089#{e[:uri].gsub(":repo_id", "2").gsub(":id", "1").gsub(/(?<=\/)(:.*?)(?=\/)/, "1").gsub(/(?<=\/):.*?$/, "1")}" %>
<% if !url_params.empty? && !e[:paginated] %>
  <% url_param_examples = [] %>
  <% url_params.each do |param| %>
    <% if param == "resolve" %>
      <% url_param_examples << "#{param}[]=[record_types, to_resolve]" %>
    <% elsif example[param] %>
      <% if example[param] == "BooleanParam" %>
        <% url_param_examples << "#{param}=true" %>
      <% else %>
        <% url_param_examples << "#{param}=#{example[param]}" %>
      <% end %>
    <% end %>
  <% end %>
  <% request_uri += "?#{url_param_examples.join("&")}" %>
<% end %>

<% data_params = e[:params].map{|p| p[0] if ((p[3] or {})[:body] or p[1] == :body_stream)}.compact %>
<% if !data_params.empty? %>
  <% data_param = data_params[0] %>
  <% data_example = example[data_param] ? example[data_param].to_json.gsub("{", "{ ").gsub(",", ",\n") : "Example Missing" %>
<% else %>
  <% data_example = "Example Missing" %>
<% end %>

```shell
<% if e[:method] == [:get] %>
  <% if e[:paginated] %>
# return first 10 records
curl -H "X-ArchivesSpace-Session: $SESSION" "<%= request_uri %>?page=1&page_size=10"
# return first 5 records in the Fibonacci sequence
curl -H "X-ArchivesSpace-Session: $SESSION" "<%= request_uri %>?id_set=1,2,3,5,8"
# return an array of all the ids
curl -H "X-ArchivesSpace-Session: $SESSION" "<%= request_uri %>?all_ids=true"
  <% else %>
curl -H "X-ArchivesSpace-Session: $SESSION" "<%= request_uri %>"
  <% end %>
<% elsif e[:method] == [:post] %>
curl -H "X-ArchivesSpace-Session: $SESSION" \
  -d '<%= data_example %>' \
  "<%= request_uri %>"
<% elsif e[:method] == [:delete] %>
curl -H "X-ArchivesSpace-Session: $SESSION" -X DELETE "<%= request_uri %>"
<% else %>
  <% example.each_pair do |k,v| %>
    <% next if e[:uri].include?("/:#{k}") %>
curl -H "X-ArchivesSpace-Session: $SESSION" \
  -d '<%= v.to_json.gsub("{", "{ ").gsub(",", ",\n") %>' \
  "<%= request_uri %>"
  <% end %>
<% end %>

```

__Endpoint__

```<%= e[:method].map &:upcase %> <%= e[:uri]%> ```

__Description__

<%= e[:description]%>


__Parameters__

<% if e[:paginated] %>
<aside class="notice">
This endpoint is paginated. :page, :id_set, or :all_ids is required
<ul>
  <li>Integer page &ndash; The page set to be returned</li>
  <li>Integer page_size &ndash; The size of the set to be returned ( Optional. default set in AppConfig )</li>
  <li>Comma seperated list id_set &ndash; A list of ids to request resolved objects ( Must be smaller than default page_size )</li>
  <li>Boolean all_ids &ndash; Return a list of all object ids</li>
</ul>
</aside>
<% end %>
<% e[:params].each do |param|
  opts = (param[3] or {})
  vs = opts[:validation] ? " -- #{opts[:validation][0]}" : ""
  optional = opts[:optional] ? " (Optional)" : "" %>
<% if opts[:body] %>
	<%= "#{param[1]} <request body> -- #{param[2]}#{vs}" %>
<% else %>
	<%= "#{param[1]} #{param[0]}#{optional} -- #{param[2]}#{vs}" %>
<% end %>
<% end %>

__Returns__

<% e[:returns].each do |ret| %>
  <%= "\t#{ret[0]} -- #{ret[1]}\n" %>
<% end %>

<% end %>

<% end %>

# Routes by URI

<p>An index of routes available in the ArchivesSpace API, alphabetically by URI.</p>

<table>
  <thead>></thead>
  <thead>
    <tr>
      <th>Route</th> <th>Method(s)</th> <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <% @endpoints.sort_by do |ep| ep[:uri] end.each do |ep| %>
      <tr>
        <td><a href="#<%= ep[:description].downcase.gsub(/[^[:alnum:]]/, '-').sub(/-+\z/, '') %>"><%= ep[:uri] %></a></td>
        <td><%= ep[:method].map(&:upcase).join(", ") %></td>
        <td><%= ep[:description] %></td>
      </tr>
    <% end %>
  </tbody>
</table>
