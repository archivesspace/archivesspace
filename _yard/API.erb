---
<%# Note: Do not modify the indentation/white space in this file.  It matters! %>

<%# hateful hack to get additional highlighter tabs %>
<% hilighters = @endpoints.each.map do |e| e[:examples].keys.reject(&->(k) {k == 'shell'}) end.flatten.to_set.to_a.sort %>

title: API Reference

language_tabs:
  - shell
<% hilighters.each do |hl| %>
  - <%= hl %>
<% end %>
toc_footers:
  - <a href='http://github.com/tripit/slate'>Documentation Powered by Slate</a>

includes:
  - errors

search: true
---

# Introduction

This is the documentation for the ArchivesSpace RESTful API. This documents the endpoints that are used by the backend server to edit records in the application.

This example API documentation page was created with [Slate](http://github.com/tripit/slate).

# Authentication

<!--
```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```
-->

> Example Authentication Request:

```shell
# With shell, you can pass the correct header with each request
curl -s -F password="admin" "http://localhost:8089/users/admin/login"
```

```python
# Using the ArchivesSnake library
from asnake.client import ASnakeClient

client = ASnakeClient(baseurl="http://localhost:8089",
                      username="admin",
                      password="admin")
client.authorize()
```

> Example Response:

```json
{
   "session":"9528190655b979f00817a5d38f9daf07d1686fed99a1d53dd2c9ff2d852a0c6e",
   "user":{
      "lock_version":6,
      "username":"admin",
      "name":"Administrator",
      "is_system_user":true,
      "create_time":"2015-05-08T13:10:06Z",
      "system_mtime":"2015-07-07T10:21:53Z",
      "user_mtime":"2015-07-07T10:21:53Z",
      "jsonmodel_type":"user",
      "groups":[

      ],
      "is_admin":true,
      "uri":"/users/1",
      "agent_record":{
         "ref":"/agents/people/1"
      },
      "permissions":{
         "/repositories/1":[
            "update_location_record",
            "delete_vocabulary_record",
            "update_subject_record",
            "delete_subject_record",
            "update_agent_record",
            "delete_agent_record",
            "update_vocabulary_record",
            "merge_subject_record",
            "merge_agent_record",
            "administer_system",
            "become_user",
            "cancel_importer_job",
            "create_repository",
            "delete_archival_record",
            "delete_classification_record",
            "delete_event_record",
            "delete_repository",
            "import_records",
            "index_system",
            "manage_agent_record",
            "manage_repository",
            "manage_subject_record",
            "manage_users",
            "manage_vocabulary_record",
            "mediate_edits",
            "merge_agents_and_subjects",
            "merge_archival_record",
            "suppress_archival_record",
            "system_config",
            "transfer_archival_record",
            "transfer_repository",
            "update_accession_record",
            "update_classification_record",
            "update_digital_object_record",
            "update_event_record",
            "update_resource_record",
            "view_all_records",
            "view_repository",
            "view_suppressed"
         ],
         "_archivesspace":[
            "administer_system",
            "become_user",
            "cancel_importer_job",
            "create_repository",
            "delete_archival_record",
            "delete_classification_record",
            "delete_event_record",
            "delete_repository",
            "import_records",
            "index_system",
            "manage_agent_record",
            "manage_repository",
            "manage_subject_record",
            "manage_users",
            "manage_vocabulary_record",
            "mediate_edits",
            "merge_agents_and_subjects",
            "merge_archival_record",
            "suppress_archival_record",
            "system_config",
            "transfer_archival_record",
            "transfer_repository",
            "update_accession_record",
            "update_classification_record",
            "update_digital_object_record",
            "update_event_record",
            "update_resource_record",
            "view_all_records",
            "view_repository",
            "view_suppressed",
            "update_location_record",
            "delete_vocabulary_record",
            "update_subject_record",
            "delete_subject_record",
            "update_agent_record",
            "delete_agent_record",
            "update_vocabulary_record",
            "merge_subject_record",
            "merge_agent_record"
         ]
      }
   }
}
```

> It's a good idea to save the session key since this will be used for later requests:

```shell
# Mac/Unix terminal
export SESSION="9528190655b979f00817a5d38f9daf07d1686fed99a1d53dd2c9ff2d852a0c6e"

# Windows Command Prompt
set SESSION="9528190655b979f00817a5d38f9daf07d1686fed99a1d53dd2c9ff2d852a0c6e"

# Windows PowerShell
$env:SESSION="9528190655b979f00817a5d38f9daf07d1686fed99a1d53dd2c9ff2d852a0c6e"
```

```python
# Handled by ArchivesSnake library
# For more information, see:
# https://github.com/archivesspace-labs/ArchivesSnake/#low-level-api
```

Most requests to the ArchivesSpace backend require a user to be authenticated.  This can be done with a POST request to the /users/:user_name/login endpoint, with :user_name and :password parameters being supplied.

The JSON that is returned will have a session key, which can be stored and used for other requests. Sessions will expire after an hour, although you can change this in your config.rb file.

# Common Parameters

As you use the ArchivesSpace API, you may start to notice similarities between different endpoints, and arguments that repeatedly show up in URLs or parameter lists.  Some of the most general bear special description.

## Paginated Endpoints

Endpoints that represent groups of objects, rather than single objects, tend to be paginated.   Paginated endpoints are called out in the documentation as special, with some version of the following content appearing:

<aside class="notice">
  This endpoint is paginated. :page, :id_set, or :all_ids is required
  <ul>
    <li>Integer page &ndash; The page set to be returned</li>
    <li>Integer page_size &ndash; The size of the set to be returned ( Optional. default set in AppConfig )</li>
    <li>Comma separated list id_set &ndash; A list of ids to request resolved objects ( Must be smaller than default page_size )</li>
    <li>Boolean all_ids &ndash; Return a list of all object ids</li>
  </ul>
</aside>

These endpoints support some or all of the following:

- paged access to objects (via :page)
- listing all matching ids (via :all_ids)
- fetching specific known objects via their database ids (via :id_set)

## refs and :resolve

```shell

curl -H "X-ArchivesSpace-Session: $SESSION" \
"http://localhost:8089/repositories/24/top_container?resolve[]=repository"

# JSON Output: Some keys have been left out in order to make the example shorter and clearer

{
  "lock_version": 11,
  "indicator": "1",
  "created_by": "admin",
  "last_modified_by": "admin",
  "type": "box",
  "jsonmodel_type": "top_container",
  "uri": "/repositories/24/top_containers/24470",
  "repository": {
    "ref": "/repositories/24",
    "_resolved": {
      "lock_version": 1,
      "repo_code": "HOU",
      "name": "Houghton Library",
      "org_code": "MH-H",
      "url": "http://nrs.harvard.edu/urn-3:hul.ois:HOU",
      "image_url": "http://nrs.harvard.edu/urn-3:HUL.OIS:fas_shield",
      "created_by": "admin",
      "last_modified_by": "admin",
      "publish": true,
      "jsonmodel_type": "repository",
      "uri": "/repositories/24",
      "display_string": "Houghton Library (HOU)",
      "agent_representation": {
        "ref": "/agents/corporate_entities/1511"
      }
    }
  },
  "restricted": false,
  "is_linked_to_published_record": true,
  "display_string": "Box 1: Series pfMS Am 21",
  "long_display_string": "MS Am 21, MS Am 21.5, MCZ 118, Series pfMS Am 21, Box 1"
}
```

```python
from asnake.client import ASnakeClient

client = ASnakeClient()
client.authorize()

client.get('repositories/24/top_container', params={'resolve': ['repository']}).json()

# JSON Output: Some keys have been left out in order to make the example shorter.

{
  "lock_version": 11,
  "indicator": "1",
  "created_by": "admin",
  "last_modified_by": "admin",
  "type": "box",
  "jsonmodel_type": "top_container",
  "uri": "/repositories/24/top_containers/24470",
  "repository": {
    "ref": "/repositories/24",
    "_resolved": {
      "lock_version": 1,
      "repo_code": "HOU",
      "name": "Houghton Library",
      "org_code": "MH-H",
      "url": "http://nrs.harvard.edu/urn-3:hul.ois:HOU",
      "image_url": "http://nrs.harvard.edu/urn-3:HUL.OIS:fas_shield",
      "created_by": "admin",
      "last_modified_by": "admin",
      "publish": True,
      "jsonmodel_type": "repository",
      "uri": "/repositories/24",
      "display_string": "Houghton Library (HOU)",
      "agent_representation": {"ref": "/agents/corporate_entities/1511"}}},
  "restricted": False,
  "is_linked_to_published_record": True,
  "display_string": "Box 1: Series pfMS Am 21",
  "long_display_string": "MS Am 21, MS Am 21.5, MCZ 118, Series pfMS Am 21, Box 1"
}
```


In ArchivesSpace's JSONModel schema, a `ref` is a link to another object.  They take the general form of a JSON object with a `ref` key, containing the URI of an object in ArchivesSpace, and optionally other attributes. For example, a ref to a `resource` might look like this:

<code>
{'ref': '/repositories/13/resources/155'}
</code>

The :resolve parameter is a way to tell ArchivesSpace to attach the full object to these refs; it is passed in as an array of keys to "prefetch" in the returned JSON.  The object is included in the ref under a `_resolved` key.


# ArchivesSpace REST API
As of <%= @time.inspect %> the following REST endpoints exist in the master branch of the development repository:

<% @endpoints.each do | e | %>

## <%= e[:description]%>

<% example =  @examples[e[:uri]][e[:method].to_s] %>

<% if example %>

<% tmp = [] %>
<% e[:params].each do |p| %>
  <% if p.is_a? String %>
    <% tmp << p %>
  <% else %>
    <% tmp << p[0] unless (e[:uri].include?("/:#{p[0]}") or (p[3] or {})[:body] or p[1] == :body_stream or ["repo_id", "id"].include?(p[0])) %>
  <% end %>
<% end %>
<% url_params = tmp.compact %>
<% request_uri = "http://localhost:8089#{e[:uri].gsub(":repo_id", "2").gsub(":id", "1").gsub(/(?<=\/)(:.*?)(?=\/)/, "1").gsub(/(?<=\/):.*?$/, "1")}" %>
<% if !url_params.empty? && !e[:paginated] %>
  <% url_param_examples = [] %>
  <% url_params.each do |param| %>
    <% if param == "resolve" %>
      <% url_param_examples << "#{param}[]=[record_types, to_resolve]" %>
    <% elsif example[param] %>
      <% if example[param] == "BooleanParam" %>
        <% url_param_examples << "#{param}=true" %>
      <% else %>
        <% url_param_examples << "#{param}=#{example[param]}" %>
      <% end %>
        <% elsif param.is_a? String %>
          <% url_param_examples << "#{param}=#{param}" %>
    <% end %>
  <% end %>
  <% request_uri += "?#{url_param_examples.join("&")}" %>
<% end %>

<% tmp = [] %>
<% e[:params].each do |p| %>
  <% if p.is_a? String %>
    <% tmp << p %>
  <% else %>
    <% tmp << p[0] if ((p[3] or {})[:body] or p[1] == :body_stream) %>
  <% end %>
<% end %>
<% data_params = tmp.compact %>
<% if !data_params.empty? %>
  <% data_param = data_params[0] %>
  <% data_example = example[data_param] ? example[data_param].to_json.gsub("{", "{ ").gsub(",", ",\n") : "Example Missing" %>
<% else %>
  <% data_example = "Example Missing" %>
<% end %>
<% if e[:examples]['shell'] %>
  <%= e[:examples]['shell'] %>
<% else %>
```shell
<% if e[:method] == [:get] %>
<% if e[:paginated] %>
# return first 10 records
curl -H "X-ArchivesSpace-Session: $SESSION" \
  "<%= request_uri %>?page=1&page_size=10"
# return first 5 records in the Fibonacci sequence
curl -H "X-ArchivesSpace-Session: $SESSION" \
  "<%= request_uri %>?id_set=1,2,3,5,8"
# return an array of all the ids
curl -H "X-ArchivesSpace-Session: $SESSION" \
  "<%= request_uri %>?all_ids=true"
<% elsif e[:paged] %>
# return first 10 records
curl -H "X-ArchivesSpace-Session: $SESSION" \
  "<%= request_uri %>?page=1&page_size=10"
<% else %>
curl -H "X-ArchivesSpace-Session: $SESSION" \
  "<%= request_uri %>"
<% end %>
<% elsif e[:method] == [:post] %>
curl -H "X-ArchivesSpace-Session: $SESSION" \
  -d '<%= data_example %>' \
  "<%= request_uri %>"
<% elsif e[:method] == [:delete] %>
curl -H "X-ArchivesSpace-Session: $SESSION" \
  -X DELETE \
  "<%= request_uri %>"
<% else %>
<% example.each_pair do |k,v| %>
  <% next if e[:uri].include?("/:#{k}") %>
curl -H "X-ArchivesSpace-Session: $SESSION" \
  -d '<%= v.to_json.gsub("{", "{ ").gsub(",", ",\n") %>' \
  "<%= request_uri %>"
  <% end %>
<% end %>

```
<% end %>

<%= e[:examples].reject do |k,v| k == 'shell' end.to_h.values.join("\n\n") %>

__Endpoint__

```<%= e[:method].map &:upcase %> <%= e[:uri]%> ```

__Description__

<%= e[:description]%>

<%= e[:documentation] %>

<% if !e[:documentation] || e[:prepend_docs] %>

__Parameters__
<% if e[:deprecated] %>
<aside class="warning">
  This endpoint is deprecated, and may be removed from a future release of ArchivesSpace.
  <% if e[:deprecated_description] %>
    <p><%= e[:deprecated_description] %></p>
  <% end %>
</aside>

<% end %>
<% if e[:paginated] %>
<aside class="notice">
This endpoint is paginated. :page, :id_set, or :all_ids is required
<ul>
  <li>Integer page &ndash; The page set to be returned</li>
  <li>Integer page_size &ndash; The size of the set to be returned ( Optional. default set in AppConfig )</li>
  <li>Comma separated list id_set &ndash; A list of ids to request resolved objects ( Must be smaller than default page_size )</li>
  <li>Boolean all_ids &ndash; Return a list of all object ids</li>
</ul>
</aside>
<% elsif e[:paged]%>
<aside class="notice">
This endpoint is paginated. :page is required
<ul>
  <li>Integer page &ndash; The page set to be returned</li>
  <li>Integer page_size &ndash; The size of the set to be returned ( Optional. default set in AppConfig )</li>
</ul>
</aside>
<% end %>

<% e[:params].each do |param| %>
  <% if param.is_a? String %>
    <% opts = {} %>
  <% else %>
    <% opts = (param[3] or {}) %>
  <% end %>
  <% unless opts.empty? %>
    <% vs = opts[:validation] ? " -- #{opts[:validation][0]}" : "" %>
    <% optional = opts[:optional] ? " (Optional)" : "" %>
  <% end %>
  <% if opts[:body] %>
	  <%= "#{param[1]} <request body> -- #{param[2]}#{vs}" %>
  <% else %>
	  <%= "#{param[1]} #{param[0]}#{optional} -- #{param[2]}#{vs}" %>
  <% end %>
<% end %>

__Returns__

<% e[:returns].each do |ret| %>
  <%= "\t#{ret[0]} -- #{ret[1]}\n" %>
<% end %>

<%# end prepend check %>
<% end %>
<% end %>

<% end %>

# Routes by URI

<p>An index of routes available in the ArchivesSpace API, alphabetically by URI.</p>

<table>
  <thead>></thead>
  <thead>
    <tr>
      <th>Route</th> <th>Method(s)</th> <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <% @endpoints.sort_by do |ep| ep[:uri] end.each do |ep| %>
      <tr>
        <td><a href="#<%= ep[:description].downcase.gsub(/[^[:alnum:]]/, '-').sub(/-+\z/, '') %>"><%= ep[:uri] %></a></td>
        <td><%= ep[:method].map(&:upcase).join(", ") %></td>
        <td><%= ep[:description] %></td>
      </tr>
    <% end %>
  </tbody>
</table>
