<%= javascript_include_tag "InfiniteTree.js" %>

<div
  id="infinite-tree-container"
  data-resource-uri="<%= @resource.uri %>"
>
</div>

<%# The <template>s below get appended to #infinite-tree-container via InfiniteTree.js %>

<template id="infinite-tree-root-template">
  <ol class="infinite-tree" role="tree">
    <li class="root node" role="treeitem" id data-uri aria-expanded>
      <div class="node-row">
        <div class="node-body" title>
          <div class="node-title-container">
            <a class="node-title" href></a>
          </div>
        </div>
      </div>
      <%# ol.node-children to be inserted here by JS %>
    </li>
  </ol>
</template>

<template id="infinite-tree-node-template">
  <li class="node" role="treeitem" id data-uri>
    <div class="node-row">
      <div class="node-body" title>
        <div class="node-indentation"></div>
        <div class="node-title-container">
          <a class="node-title" href></a>
        </div>
      </div>
    </div>
    <%# ol.node-children to be inserted here by JS on expand %>
  </li>
</template>

<template id="infinite-tree-expand-button-template">
  <button class="node-expand" type="button">
    <i class="node-expand-icon glyphicon glyphicon-chevron-right"></i>
    <span class="sr-only"></span>
  </button>
</template>

<template id="infinite-tree-children-list-template">
  <ol
    class="node-children"
    role="group"
    data-parent-id
    data-tree-level
    data-total-child-batches
  >
    <%# Child nodes will be inserted here by JS %>
  </ol>
</template>

<template id="infinite-tree-batch-placeholder-template">
  <li data-batch-placeholder style="display:none"></li>
</template>


<script>
// @resource.uri looks like: /repositories/:rpid/resources/:rsid
const resourceUri = "<%= @resource.uri %>"
const resourceUriParts = resourceUri.split('/')
const resourceId = resourceUriParts[resourceUriParts.length - 1]

const infiniteTree = new InfiniteTree(
  "200",
  "<%= AppConfig[:frontend_proxy_url] %>",
  resourceUri,
  ":",
  "bulk"
);

// Set up click handling at the template level like public
// but with no InfiniteRecords like in public
infiniteTree.container.addEventListener('click', (e) => {
  if (
    !e.target.classList.contains('expandme') &&
    !e.target.classList.contains('expandme-icon')
  ) return;

  infiniteTree.expandHandler(e);
});
</script>
