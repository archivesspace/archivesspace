<div class="form-messages" id="form_messages">
<% if @exceptions %>
   <script>
     $(function () {

       var setupErrorMessage = function(idx, elt, type) {
         var $matched;
         if ($("#" + elt).length) {
           $matched = $("#" + elt);
           $matched.closest(".form-group, td").addClass("has-"+type);
           if ($("#" + elt).is("section")) {
             $("#" + elt).addClass(type);
           }
         } else if ($("[data-real-id=" + elt + "]").length) {
           $("[data-real-id=" + elt + "]").each(function() {
             $(this).parents(".form-group:first").addClass("has-"+type);
           });
         } else if ($("#" + elt + "_0_").length) {
           // I know.  Icky.
           //
           // Sometimes validation will report that an entire property
           // is missing (like resource[notes][0][content]).  If that
           // property is an array, from the form's point of view this
           // error means that the user didn't provide the first
           // element of the array (index 0).
           //
           // So, if we didn't get a match on the path specified by
           // the error, assume it's an array and look for the path of
           // the first element.
           $matched = $("#" + elt + "_0_");
           $matched.closest(".form-group, td").addClass("has-"+type);
         } else if ($("section." + elt.replace(/_$/, ''))) {
           $matched = $("section." + elt.replace(/_$/, ''));
         }
         if ($matched && !$("." + type + "[data-target=" + elt + "]").hasClass("linked-to-field")) {
             var matchedTarget = $("." + type + "[data-target=" + elt + "]");
             matchedTarget.addClass("linked-to-field");

             if (!matchedTarget.hasClass('error-field-not-found')) {
                 matchedTarget.append("<span class='glyphicon glyphicon-chevron-down jump-to-error-link'></span>").click(function() {

                     var $scrollTarget = $matched;

                     // CodeMirror text areas are hidden so we can't scroll to
                     // them.  Scroll nearby :)
                     if (!$matched.is(":visible")) {
                         $scrollTarget = $matched.parent();
                     }

                     $.scrollTo($scrollTarget, 1000, {
                         onAfter: function() {
                             $matched.focus();
                         }
                     });
                 });
             }
         }
       };

       var _errors = <%= form.exceptions_for_js(@exceptions) %>;

       var callback = function () {
         if (_errors.errors) {
           $(_errors.errors).each(function (idx, elt) {
             setupErrorMessage(idx, elt, "error");
           });
         }

         if (_errors.warnings) {
           $(_errors.warnings).each(function (idx, elt) {
             setupErrorMessage(idx, elt, "warning");
           });
         }

         // unbind the event (only needs to run once)
         $(document).unbind("loadedrecordform.aspace", callback);

         // tell the world all the errors have been rendered
         $(document).triggerHandler("formerrorready.aspace");
       };

       $(callback);
       $(document).on("loadedrecordform.aspace", callback);
       $(document).on("formerrorready.aspace", function() {
        $("#archivesSpaceSidebar").on("click", "[href='#form_messages']", function(event) {
          $("#form_messages .alert:hidden").slideDown();
        });
       });
     });
   </script>

   <% if @exceptions.has_key?(:errors) %>
      <div class="alert alert-danger">
         <% @exceptions[:errors].each do |attr, messages| %>
            <div class="errors-for-attribute">
              <% messages.each do |msg| %>
                <div class="error"
                     data-target="<%= form.id_for_javascript(attr) %>"
                     data-message="<%= h(msg) %>">
                  <% unless attr === 'coded_errors' %>
                    <span class="error-field" data-field-id="<%= form.id_for_javascript(attr) %>"></span> <span class="error-separator">-</span>
                  <% end %>
                  <%= msg %>
                </div>
              <% end %>
            </div>
         <% end %>
      </div>
   <% end %>
   <% if @exceptions.has_key?(:warnings) %>
      <div class="alert alert-warning">
         <% @exceptions[:warnings].each do |attr, messages| %>
            <div class="warnings-for-attribute">
              <% messages.each do |msg| %>
                <div class="warning" data-target="<%= form.id_for_javascript(attr) %>"><span class="error-field" data-field-id="<%= form.id_for_javascript(attr) %>"></span> <span class="error-separator">-</span> <%= msg %> </div>
              <% end %>
            </div>
         <% end %>
         <% if not @exceptions.has_key?(:errors) %>
            <br/>
            <input type="hidden" name="ignorewarnings" value="true" />
            <input type="submit" name="ignorewarnings-submit" class="btn btn-warning" value="<%= I18n.t("actions.save_anyway") %>" />
         <% end %>
      </div>
   <% end %>

   <script>
    $(function () {
      $('.error-field').each(function () {
        var field = $(this);
        var id = $(this).attr('data-field-id');

        var candidate_label_selectors = [
          /* A standard field */
          "label[for='" + id + "']",

          /* A linker (where the label is on the token-input element, not the hidden linker element) */
          "label[for='token-input-" + id + "']",

          /* A whole subrecord section by explicitly added class (e.g. "You need at least one agent name") */
          "section.field_" + id + " .subrecord-form-heading-label",

          /* A whole subrecord section by ID (e.g. "You need at least one extent") */
          /* Note: this breaks for agents because id root is 'agent' rather than 'agent_person' etc. */
          "section#" + id + " .subrecord-form-heading-label",
          "section#" + id.replace(/_$/, '') + " .subrecord-form-heading-label",

          /* Fallback for agent records for rule just above this one */
          "section." + id.replace(/_$/, '') + " .subrecord-form-heading-label",

          /* A input as a list (e.g. note contents) */
          "label[for='" + id + "_0_']",

          // A table column label span (e.g. location batch coordinate range)
          "td span[id='" + id.replace(/_label_$/, '') + "']",
        ];

        var got_match = false;
        $(candidate_label_selectors).each(function (idx, selector) {
          var match = $(selector);

          if (match.length > 0) {
            field.text(match.first().text());
            got_match = true;

            return false;
          }
        });

        if (!got_match) {
          /* If we didn't find a label for our field, pick the closest label in its subtree! */
          $('#' + id).parents('.form-group').each(function () {
            if ($(this).find('label').length > 0) {
              field.text($(this).find('label').first().text());

              return false;
            }
          });
        }

        if (field.text() === '') {
          // If there's no field, drop the separator and just show our message.
          field.parent().find('.error-separator').remove();
          field.parent().addClass('error-field-not-found');
        }
      });
    });
   </script>

<% end %>

<%= render_aspace_partial :partial => "shared/flash_messages" %>

</div>
