var SHARED_TOOLBAR_ACTIONS = [
    // Enable Reorder Mode
    {
        label: '<%= I18n.t('actions.enable_reorder') %>',
        cssClasses: 'btn-default drag-toggle',
        onRender: function(btn, node, tree, toolbarRenderer) {
            if ($(tree.large_tree.elt).is('.drag-enabled')) {
                $(btn).addClass('active').addClass('btn-success');

                $(btn).text('<%= I18n.t('actions.reorder_active') %>');

                tree.ajax_tree.hide_form();
            }
        },
        onToolbarRendered: function(btn, toolbarRenderer) {
            if ($(tree.large_tree.elt).is('.drag-enabled')) {
                $('.btn:not(.drag-toggle,.finish-editing,[data-radio-btn],.cut-selection,.paste-selection,.move-node)',toolbarRenderer.container).parent().hide();
                $('.cut-selection',toolbarRenderer.container).removeClass('disabled');
                if ($('.cut', tree.large_tree.elt).length > 0) {
                    $('.paste-selection',toolbarRenderer.container).removeClass('disabled');
                }
                $('[data-radio-group="drop-behavior"]', toolbarRenderer.container).css('display', 'flex');
            }
        },
        onClick: function(event, btn, node, tree, toolbarRenderer) {
            $(tree.large_tree.elt).toggleClass('drag-enabled');
            $(event.target).toggleClass('btn-success');

            if ($(tree.large_tree.elt).is('.drag-enabled')) {
                $(btn).text('<%= I18n.t('actions.reorder_active') %>');
                tree.ajax_tree.hide_form();
                $.scrollTo(0);
                tree.resizer.maximize(DRAGDROP_HOTSPOT_HEIGHT);
                $('.btn:not(.drag-toggle,.finish-editing,[data-radio-btn],.cut-selection,.paste-selection,.move-node)',toolbarRenderer.container).parent().hide();
                $('.cut-selection,.paste-selection,.move-node', toolbarRenderer.container).parent().show();
                $('.cut-selection,.move-node',toolbarRenderer.container).removeClass('disabled');
                $('[data-radio-group="drop-behavior"]', toolbarRenderer.container).css('display', 'flex');
            } else {
                $(btn).text('<%= I18n.t('actions.enable_reorder') %>');
                location.reload(true);
                tree.resizer.reset();
                $('.btn',toolbarRenderer.container).show();
                $('.cut-selection,.paste-selection,.move-node,[data-radio-group="drop-behavior"]', toolbarRenderer.container).hide();
                $(btn).blur();
            }

            $('#load_via_spreadsheet_help_icon').toggle();
        },
        isEnabled: function(node, tree, toolbarRenderer) {
            return true;
        },
        isVisible: function(node, tree, toolbarRenderer) {
            return !tree.large_tree.read_only;
        },
        onFormChanged: function(btn, form, tree, toolbarRenderer) {
            $(btn).addClass('disabled');
        },
        onFormLoaded: function(btn, form, tree, toolbarRenderer) {
            if ($(tree.large_tree.elt).is('.drag-enabled')) {
                tree.ajax_tree.blockout_form();
            }
        },
    },
    [
        // Cut
        {
            label: '<%= I18n.t("actions.cut") %>',
            cssClasses: 'btn-default cut-selection',
            onRender: function(btn, node, tree, toolbarRenderer) {
                if (!$(tree.large_tree.elt).is('.drag-enabled')) {
                    btn.parent().hide();
                }
            },
            onClick: function(event, btn, node, tree, toolbarRenderer) {
                event.preventDefault();
                // clear the previous cut set
                $('.cut', tree.large_tree.elt).removeClass('cut');

                var rowsToCut = [];
                if (tree.dragdrop.rowsToMove.length > 0) {
                    // if multiselected rows, cut them
                    rowsToCut = $.merge([], tree.dragdrop.rowsToMove);
                } else if (tree.current().is(':not(.root-row)')) {
                    // otherwise cut the current row
                    rowsToCut = [tree.current()];
                }

                if (rowsToCut.length > 0) {
                    $.each(rowsToCut, function(_, row) {
                        $(row).addClass('cut');
                    });

                    $('.paste-selection', toolbarRenderer.container).removeClass('disabled');
                }

                tree.dragdrop.resetState();
            },
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only && tree.dragdrop;
            }
        },
        // Paste
        {
            label: '<%= I18n.t("actions.paste") %>',
            cssClasses: 'btn-default paste-selection',
            onRender: function(btn, node, tree, toolbarRenderer) {
                if (!$(tree.large_tree.elt).is('.drag-enabled')) {
                    btn.parent().hide();
                } else if ($('.cut', $(tree.large_tree.elt)).length == 0) {
                    btn.addClass('disabled');
                }
            },
            onClick: function(event, btn, node, tree, toolbarRenderer) {
                event.preventDefault();
                var current = tree.current();
                var cut = $('.cut', tree.large_tree.elt);

                var rowsToPaste = [];
                cut.each(function(_,row) {
                    if ($(row).data('uri') != current.data('uri')) {
                        rowsToPaste.push(row);
                    }
                });

                tree.large_tree.reparentNodes(current, rowsToPaste, current.data('child_count')).done(function() {
                    $('.cut', tree.large_tree.elt).removeClass('cut');
                    toolbarRenderer.reset();
                });
            },
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only && tree.dragdrop;
            }
        },
    ],
    [
        // Drop Before
        {
            radio: {
                name: 'drop-behavior',
                value: 'before',
                id: 'drop-before',
            },
            label: '<%= I18n.t("actions.drop_before") %>',
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only && tree.dragdrop;
            }
        },
        // Drop Into
        {
            radio: {
                name: 'drop-behavior',
                value: 'into',
                id: 'drop-into',
            },
            label: '<%= I18n.t("actions.drop_into") %>',
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only && tree.dragdrop;
            }
        },
        // Drop After
        {
            radio: {
                name: 'drop-behavior',
                value: 'after',
                id: 'drop-after',
            },
            label: '<%= I18n.t("actions.drop_after") %>',
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only && tree.dragdrop;
            }
        },
    ],
    // Move
    {
        label: '<%= I18n.t "actions.move" %> ',
        cssClasses: 'btn-default dropdown-toggle cursor-default move-node',
        groupCssClasses: 'dropdown',
        onRender: function(btn, node, tree, toolbarRenderer) {
            if (!$(tree.large_tree.elt).is('.drag-enabled')) {
                btn.parent().hide();
            }
            var level = node.data('level');
            var position = node.data('position');

            var $options = $('<ul>').addClass('dropdown-menu ');
            // move up a level
            if (level > 1) {
                $options.append(item('move-node-up-level', '<%= I18n.t('actions.move_up_a_level') %>'));
            }

            var $prevAtLevel = node.prevAll('.largetree-node.indent-level-'+level+':first');
            var $nextAtLevel = node.nextAll('.largetree-node.indent-level-'+level+':first');

            // move up on same level
            if ($prevAtLevel.length > 0) {
                $options.append(item('move-node-up', '<%= I18n.t('actions.move_up') %>'));
            }
            // move down on same level
            if ($nextAtLevel.length > 0) {
                $options.append(item('move-node-down', '<%= I18n.t('actions.move_down') %>'));
            }
            // move down into sibling
            if ($prevAtLevel.length > 0 || $nextAtLevel.length > 0) {
                $options.append(siblingsSubMenu('<%= I18n.t('actions.move_down_into') %>', getSiblings()));
            }

            /**
             * @param {string} btnClass
             * @param {string} btnText
             * @returns {HTMLstring} Template list item for the $options list
             */
            function item(btnClass, btnText) {
                return `
                    <li>
                        <button
                            type="button"
                            class="btn btn-sm rounded-0 dropdown-item cursor-default move-node ${btnClass}"
                        >${btnText}</button>
                    </li>
                `;
            }

            /**
             * @returns {array} Array of sibling DOM nodes for the for siblingsSubMenu()
             */
            function getSiblings() {
                var $siblingsAbove = $.makeArray(node.prevAll('.largetree-node.indent-level-'+level));
                var $siblingsBelow = $.makeArray(node.nextAll('.largetree-node.indent-level-'+level));

                var NUMBER_OF_SIBLINGS_TO_LIST = 20;
                var HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST = parseInt(NUMBER_OF_SIBLINGS_TO_LIST/2);
                var $siblingsToAddToMenu = [];
                if ($siblingsAbove.length > HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST && $siblingsBelow.length > HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST) {
                    $siblingsToAddToMenu = $.merge($siblingsAbove.slice(0, HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST ).reverse(),
                                                   $siblingsBelow.slice(0, HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST));
                } else if ($siblingsAbove.length > HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST) {
                    $siblingsToAddToMenu = $.merge($siblingsAbove.slice(0, NUMBER_OF_SIBLINGS_TO_LIST - $siblingsBelow.length).reverse(),
                                                   $siblingsBelow);
                } else if ($siblingsBelow.length > HALF_THE_NUMBER_OF_SIBLINGS_TO_LIST) {
                    $siblingsToAddToMenu = $.merge($siblingsAbove.reverse(),
                                                   $siblingsBelow.slice(0, NUMBER_OF_SIBLINGS_TO_LIST - $siblingsAbove.length));
                } else {
                    $siblingsToAddToMenu = $.merge($siblingsAbove.reverse(), $siblingsBelow);
                }

                return $siblingsToAddToMenu;
            }

            /**
             * @param {string} btnText
             * @param {array} siblings - Array of sibling DOM nodes
             * @returns {HTMLstring} Template list item for the move-node-into-menu list
             */
            function siblingsSubMenu(btnText, siblings) {
                return `
                    <li class="dropdown-submenu dropdown-item p-0">
                        <button
                            type="button"
                            class="btn btn-sm rounded-0 dropdown-item cursor-default move-node move-node-down-into"
                            data-toggle="dropdown"
                            aria-expanded="false"
                        >${btnText}</button>
                        <ul class="dropdown-menu move-node-into-menu">
                            ${siblings.map(sibling => {
                                const $sibling = $(sibling);

                                return `
                                    <li>
                                        <button
                                            type="button"
                                            class="btn btn-sm rounded-0 dropdown-item cursor-default move-node move-node-down-into"
                                            data-uri="${$sibling.data('uri')}" 
                                            data-tree_id="${$sibling.attr('id')}"
                                        >${$sibling.find('.record-title').text().trim()}</button>
                                    </li>
                                `}
                            ).join('')}
                        </ul>
                    </li>
                `;
            }

            $options.appendTo(btn.closest('.btn-group'));

            if ($options.is(':empty')) {
                // node has no parent or siblings so has nowhere to move
                // remove the toolbar action if this is the case
                btn.remove();
            }

            $options.on('click', '.move-node-up-level', function(event) {
                // move node to last child of parent
                var $new_parent = node.prevAll('.indent-level-'+(level-2)+":first");
                tree.large_tree.reparentNodes($new_parent, node, $new_parent.data('child_count')).done(function() {
                    toolbarRenderer.reset();
                });
            }).on('click', '.move-node-up', function(event) {
                // move node above nearest sibling
                var $parent = node.prevAll('.indent-level-'+(level-1)+":first");
                var $prev = node.prevAll('.indent-level-'+(level)+":first");
                tree.large_tree.reparentNodes($parent, node, $prev.data('position')).done(function() {
                    toolbarRenderer.reset();
                });
            }).on('click', '.move-node-down', function(event) {
                // move node below nearest sibling
                var $parent = node.prevAll('.indent-level-'+(level-1)+":first");
                var $next = node.nextAll('.indent-level-'+(level)+":first");
                tree.large_tree.reparentNodes($parent, node, $next.data('position')+1).done(function() {
                    toolbarRenderer.reset();
                });
            }).on('click', '.move-node-down-into', function(event) {
                // move node to last child of sibling
                var $parent = $('#'+$(this).data('tree_id'));
                tree.large_tree.reparentNodes($parent, node, $parent.data('child_count')).done(function() {
                    toolbarRenderer.reset();
                });
            });

            btn.attr('data-toggle', 'dropdown');
        },
        isEnabled: function(node, tree, toolbarRenderer) {
            return true;
        },
        isVisible: function(node, tree, toolbarRenderer) {
            // not available to root nodes
            if (node.is('.root-row')) {
                return false;
            }

            return !tree.large_tree.read_only && tree.dragdrop;
        },
    },

    // go back to the read only page
    // Close Record
    {
        label: '<%= I18n.t("actions.finish_editing") %>',
        cssClasses: 'btn-success finish-editing',
        groupCssClasses: 'ml-auto order-1',
        onRender: function(btn, node, tree, toolbarRenderer) {
            var readonlyPath = location.pathname.replace(/\/edit$/, '');
            btn.attr('href', readonlyPath + location.hash);
        },
        isEnabled: function(node, tree, toolbarRenderer) {
            return true;
        },
        isVisible: function(node, tree, toolbarRenderer) {
            return !tree.large_tree.read_only;
        }
    },
];

var EXPAND_MODE_ACTIONS = [
    [
        // enable auto-expanding of the tree
        // Auto-Expand All
        {
            label: '<%= I18n.t('actions.expand_tree_mode_on') %>',
            cssClasses: 'btn-default btn-expand-tree-mode',
            onClick: function(event, btn, node, tree, toolbarRenderer) {
                $(tree.large_tree.elt).toggleClass('expand-all');
                $(event.target).toggleClass('btn-success');

                if ($(tree.large_tree.elt).is('.expand-all')) {
                    $(btn).text('<%= I18n.t('actions.expand_tree_mode_off') %>');
                    $('.expandme').addClass('disabled').attr('disabled', 'disabled').attr('aria-disabled', 'true');
                    $(btn).blur();
                    $(btn).addClass('disabled').attr('disabled', 'disabled').attr('aria-disabled', 'true');
                    tree.large_tree.considerExpandingRow(() => {
                        setTimeout(() => $(btn).removeClass('disabled').removeAttr('disabled').removeAttr('aria-disabled'), 100);
                    });

                } else {
                    $(btn).text('<%= I18n.t('actions.expand_tree_mode_on') %>');
                    $('.expandme').removeAttr('disabled').removeAttr('aria-disabled').removeClass('disabled');
                    $(btn).blur();
                }

            },
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only;
            },
            onFormChanged: function(btn, form, tree, toolbarRenderer) {
            },
            onFormLoaded: function(btn, form, tree, toolbarRenderer) {
            },
        },

        // collapse all open nodes and turn off expand mode
        // Collapse Tree
        {
            label: '<%= I18n.t('actions.collapse_tree') %>',
            cssClasses: 'btn-default',
            onClick: function(event, btn, node, tree, toolbarRenderer) {
                if ($(tree.large_tree.elt).is('.expand-all')) {
                    // turn off expand mode if it is on
                    $('.btn-expand-tree-mode', '#tree-toolbar').trigger('click');
                    $('.btn-expand-tree-mode', '#tree-toolbar').blur();
                    $('.btn-expand-tree-mode', '#tree-toolbar').removeClass('active');
                }

                $(btn).blur();
                // tree needs to be collapsed from bottom up;
                const collapsibles = tree.large_tree.elt.find('.expandme')
                                    .not('[aria-hidden="true"]')
                                    .not(':not([aria-expanded="true"])')
                let count = collapsibles.length;

                if (count == 0) {
                    return;
                }
                $('.btn-expand-tree-mode', '#tree-toolbar').addClass('disabled').attr('disabled', 'disabled').attr('aria-disabled', 'true');

                const ticker = (() => {
                    count = count - 1
                    if (count == 0) {
                        $('.btn-expand-tree-mode', '#tree-toolbar').removeClass('disabled').removeAttr('disabled').removeAttr('aria-disabled');
                        $('.btn-expand-tree-mode', '#tree-toolbar').blur();
                        $('.btn-expand-tree-mode', '#tree-toolbar').removeClass('active');
                    }
                });

                collapsibles.toArray().forEach((collapsible) => {
                    let row = $(collapsible.closest('.table-row'));
                    let timeout = 600 - (50 * row.data('level'));
                    setTimeout(() => {
                        $(collapsible).trigger("click");
                        ticker();
                        }, timeout)
                });

            },
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only;
            },
            onFormChanged: function(btn, form, tree, toolbarRenderer) {
            },
            onFormLoaded: function(btn, form, tree, toolbarRenderer) {
            },
        },
    ]
];


var TreeToolbarConfiguration = {
    resource: [].concat(SHARED_TOOLBAR_ACTIONS).concat(EXPAND_MODE_ACTIONS).concat([
        [
            // Add Child
            {
                label: '<%= I18n.t("resource._frontend.action.add_child") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level') + 1);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // Load via Spreadsheet
            {
                label: '<%= I18n.t("resource._frontend.action.load_bulk") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    file_modal_html = '';
                    bulkFileSelection();
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');

                    const inReorderMode = $('#tree-container').hasClass('drag-enabled');

                    if (!inReorderMode) {
                    $(btn).after(AS.renderTemplate('template_load_via_spreadsheet_help_icon'));

                    const helpLinkID = '#load_via_spreadsheet_help_icon';
                    $(helpLinkID).hover(
                        () => $(helpLinkID).tooltip('show'),
                        () => $(helpLinkID).tooltip('hide')
                    );
                    }
                },
            },
            // RDE
            {
                label: '<%= I18n.t("actions.rapid_data_entry") %>',
                cssClasses: 'btn-default add-children',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    $(document).triggerHandler("rdeshow.aspace", [node, btn]);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            }
        ],
    ]),

    archival_object: [].concat(SHARED_TOOLBAR_ACTIONS).concat(EXPAND_MODE_ACTIONS).concat([
        [
            // Add Child
            {
                label: '<%= I18n.t("archival_object._frontend.action.add_child") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level') + 1);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // Add Sibling
            {
                label: '<%= I18n.t("archival_object._frontend.action.add_sibling") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level'));
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            {
                label: '<%= I18n.t("archival_object._frontend.action.add_duplicate") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level'), { duplicate_from_archival_object: { 'uri': node.data('uri') } });
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // Load via Spreadsheet
            {
                label: '<%= I18n.t("resource._frontend.action.load_bulk") %>',
                cssClasses: 'btn-default border-right-0',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    file_modal_html = '';
                    bulkFileSelection();
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');

                    const inReorderMode = $('#tree-container').hasClass('drag-enabled');

                    if (!inReorderMode) {
                    $(btn).after(AS.renderTemplate('template_load_via_spreadsheet_help_icon'));

                    const helpLinkID = '#load_via_spreadsheet_help_icon';
                    $(helpLinkID).hover(
                        () => $(helpLinkID).tooltip('show'),
                        () => $(helpLinkID).tooltip('hide')
                    );
                    }
                },
            },
            // RDE
            {
                label: '<%= I18n.t("actions.rapid_data_entry") %>',
                cssClasses: 'btn-default add-children',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    $(document).triggerHandler("rdeshow.aspace", [node, btn]);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            }
        ],
        // Transfer
        {
            label: '<%= I18n.t("actions.transfer") %>',
            cssClasses: 'btn-default dropdown-toggle transfer-node',
            groupCssClasses: 'dropdown',
            onRender: function(btn, node, tree, toolbarRenderer) {
                var $li = btn.parent();
                btn.replaceWith(AS.renderTemplate('tree_toolbar_transfer_action', {
                                    node_id: TreeIds.uri_to_parts(node.data('uri')).id,
                                    root_object_id: TreeIds.uri_to_parts(tree.large_tree.root_uri).id,
                                }));
                $(".linker:not(.initialised)", $li).linker()

                var $form = $li.find('form');
                $form.on('submit', function(event) {
                    if ($(this).serializeObject()['transfer[ref]']) {
                        // continue with the POST
                        return;
                    } else {
                        event.stopPropagation();
                        event.preventDefault();
                        $(".missing-ref-message", $form).show();
                        return true;
                    }
                }).on('click', '.btn-cancel', function(event) {
                    event.preventDefault();
                    event.stopPropagation();
                    $(this).closest('.btn-group.dropdown').toggleClass("open");
                }).on('click', ':input', function(event) {
                    event.stopPropagation();
                }).on("click", ".dropdown-toggle", function(event) {
                    event.stopPropagation();
                    $(this).parent().toggleClass("show");
                    $(this).siblings('.dropdown-menu').toggleClass("show");
                    $(this).attr('aria-expanded', ($(this).parent().hasClass("show") ? 'true' : 'false'));
                }).on('click', '[data-resource-linker-browse-btn]', function(event) {
                    $(this).closest('.dropdown-menu.show').removeClass('show');
                    $(this).closest('.input-group-append.show').removeClass('show');
                    $(this).closest('.dropdown-toggle[aria-expanded="true"]')
                        .attr('aria-expanded', 'false');
                });
                $li.on('shown.bs.dropdown', function() {
                    $("#token-input-transfer_ref_", $form).focus();
                });
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only;
            },
        },
    ]),

    digital_object: [].concat(SHARED_TOOLBAR_ACTIONS).concat([
        [
            // Add Child
            {
                label: '<%= I18n.t("digital_object._frontend.action.add_child") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level') + 1);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // RDE
            {
                label: '<%= I18n.t("actions.rapid_data_entry") %>',
                cssClasses: 'btn-default add-children',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    $(document).triggerHandler("rdeshow.aspace", [node, btn]);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            }
        ]
    ]),

    digital_object_component: [].concat(SHARED_TOOLBAR_ACTIONS).concat([
        [
            // Add Child
            {
                label: '<%= I18n.t("digital_object_component._frontend.action.add_child") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level') + 1);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // Add Sibling
            {
                label: '<%= I18n.t("digital_object_component._frontend.action.add_sibling") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level'));
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // RDE
            {
                label: '<%= I18n.t("actions.rapid_data_entry") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    $(document).triggerHandler("rdeshow.aspace", [node, btn]);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            }
        ]
    ]),

    classification: [].concat(SHARED_TOOLBAR_ACTIONS).concat([
        // Add Child
        {
            label: '<%= I18n.t("classification._frontend.action.add_child") %>',
            cssClasses: 'btn-default',
            onClick: function(event, btn, node, tree, toolbarRenderer) {
                tree.ajax_tree.add_new_after(node, node.data('level') + 1);
            },
            isEnabled: function(node, tree, toolbarRenderer) {
                return true;
            },
            isVisible: function(node, tree, toolbarRenderer) {
                return !tree.large_tree.read_only;
            },
            onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                $(btn).removeClass('disabled');
            },
            onToolbarRendered: function(btn, toolbarRenderer) {
                $(btn).addClass('disabled');
            },
        }
    ]),

    classification_term: [].concat(SHARED_TOOLBAR_ACTIONS).concat([
        [
            // Add Child
            {
                label: '<%= I18n.t("classification_term._frontend.action.add_child") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level') + 1);
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
            // Add Sibling
            {
                label: '<%= I18n.t("classification_term._frontend.action.add_sibling") %>',
                cssClasses: 'btn-default',
                onClick: function(event, btn, node, tree, toolbarRenderer) {
                    tree.ajax_tree.add_new_after(node, node.data('level'));
                },
                isEnabled: function(node, tree, toolbarRenderer) {
                    return true;
                },
                isVisible: function(node, tree, toolbarRenderer) {
                    return !tree.large_tree.read_only;
                },
                onFormLoaded: function(btn, form, tree, toolbarRenderer) {
                    $(btn).removeClass('disabled');
                },
                onToolbarRendered: function(btn, toolbarRenderer) {
                    $(btn).addClass('disabled');
                },
            },
        ]
    ]),
};

function TreeToolbarRenderer(tree, container) {
    this.tree = tree;
    this.container = container;
}

TreeToolbarRenderer.prototype.reset = function() {
    if (this.current_node) {
        this.render(this.current_node);
    }
};

TreeToolbarRenderer.prototype.reset_callbacks = function() {
    this.on_form_changed_callbacks = [];
    this.on_form_loaded_callbacks = [];
    this.on_toolbar_rendered_callbacks = [];
};

TreeToolbarRenderer.prototype.render = function(node) {
    var self = this;

    if (self.current_node) {
        self.reset_callbacks();
    }

    self.current_node = node;

    var actions = TreeToolbarConfiguration[node.data('jsonmodel_type')];
    self.container.empty();

    if (actions == null) {
        return
    }

    self.reset_callbacks();

    actions.map(function(action_or_group) {
        let action_group;
        if (!$.isArray(action_or_group)) {
            action_group = [action_or_group];
        } else {
            action_group = action_or_group;
        }

        var $group;
        if (action_group[0].radio) {
            $group = $('<ol>').addClass('btn-group btn-group__radio').attr('data-radio-group', action_group[0].radio.name);
        } else {
            $group = $('<div>').addClass('btn-group');
        }

        self.container.append($group);

        action_group.map(function(action) {
            if (action.isVisible == undefined || $.proxy(action.isVisible, tree)(node, tree, self)) {
                var $btn;
                if (action.radio) {
                    const isChecked = self.tree.dragdrop.dropBehavior === action.radio.value;
                    const inputHtml = `
                        <input
                            type="radio"
                            name="${action.radio.name}"
                            id="${action.radio.id}"
                            value="${action.radio.value}"
                            ${isChecked ? "checked" : ''} />
                    `;
                    const labelHtml = `
                        <label
                            class="mb-0 btn btn-sm btn-default ${action.radio.id}"
                            data-radio-btn
                            for="${action.radio.id}"
                        >${action.label}</label>
                    `;

                    $btn = $(`
                        <li>
                            ${inputHtml}
                            ${labelHtml}
                        </li>
                    `);
                    // $btn.addClass('btn btn-sm btn-default');
                } else {
                    $btn = $('<a>').addClass('btn btn-sm');
                    $btn.html(action.label).addClass(action.cssClasses).attr('href', 'javascript:void(0)');
                }

                if (action.isEnabled == undefined || $.proxy(action.isEnabled, tree)(node, tree, self)) {
                    if (action.onClick) {
                        $btn.on('click', function (event) {
                            return $.proxy(action.onClick, tree)(event, $btn, node, tree, self);
                        });
                    }
                } else {
                    $btn.addClass('disabled');
                }

                if (action.groupCssClasses) {
                    $group.addClass(action.groupCssClasses);
                }

                if (action.onFormChanged) {
                    self.on_form_changed_callbacks.push(function(form) {
                        $.proxy(action.onFormChanged, tree)($btn, form, tree, self);
                    });
                }

                if (action.onFormLoaded) {
                    self.on_form_loaded_callbacks.push(function(form) {
                        $.proxy(action.onFormLoaded, tree)($btn, form, tree, self);
                    });
                }

                if (action.onToolbarRendered) {
                    self.on_toolbar_rendered_callbacks.push(function() {
                        $.proxy(action.onToolbarRendered, tree)($btn, self);
                    });
                }

                $group.append($btn);

                if (action.onRender) {
                    $.proxy(action.onRender, tree)($btn, node, tree, self);
                }
            }
        });

        if ($group.length == 0) {
            $group.remove();
        }
    });

    $.each(self.on_toolbar_rendered_callbacks, function(i, callback) {
        callback();
    });

    $('input[type="radio"][name="drop-behavior"]').on('change', function() {
        const newDropBehavior = $('input[type="radio"][name="drop-behavior"]:checked').val();
        tree.dragdrop.dropBehavior = newDropBehavior;
        if (tree.dragdrop.storageAvailable) {
            localStorage.setItem('AS_Drop_Behavior', newDropBehavior);
        }
    })
};

TreeToolbarRenderer.prototype.notify_form_changed = function(form) {
    $.each(this.on_form_changed_callbacks, function(i, callback) {
        callback(form);
    });
};

TreeToolbarRenderer.prototype.notify_form_loaded = function(form) {
    $.each(this.on_form_loaded_callbacks, function(i, callback) {
        callback(form);
    });
};
