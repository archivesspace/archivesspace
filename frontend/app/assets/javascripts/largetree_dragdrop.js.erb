(function (exports) {
    var DRAG_DELAY = 100;
    var MOUSE_OFFSET = 20;
    var EXPAND_DELAY = 200;
    var HOTSPOT_HEIGHT = 200;
    var AUTO_SCROLL_SPEED = 200;

    function LargeTreeDragDrop(large_tree) {
        this.dragActive = false;
        this.dragIndicator = $('<div class="tree-drag-indicator" />');
        this.rowsToMove = [];

        this.scrollUpHotspot = $('<div class="tree-scroll-hotspot tree-scroll-up-hotspot" />');
        this.scrollDownHotspot = $('<div class="tree-scroll-hotspot tree-scroll-down-hotspot" />');

        this.dragDelayTimer = undefined;
        this.expandTimer = undefined;
        this.autoScrollTimer = undefined;

        this.lastCursorPosition = undefined;

        this.large_tree = large_tree;

        var self = this;
        large_tree.addCollapseNodeHook(function () {
            self.handleCollapseNode();
        });

    }

    LargeTreeDragDrop.prototype.handleCollapseNode = function() {
        var self = this;

        /* If any of our rowsToMove selections are no longer visible, deselect them. */
        var selectionToKeep = []

        $(self.rowsToMove).each(function (idx, selectedRow) {
            if ($(selectedRow).is(':visible')) {
                selectionToKeep.push(selectedRow);
            }
        });

        self.rowsToMove = selectionToKeep;

        /* Renumber any remaining selections */
        self.refreshAnnotations();
    };

    LargeTreeDragDrop.prototype.isDropAllowed = function(target_node) {
        return this.large_tree.isReparentAllowed(this.rowsToMove, target_node);
    };

    LargeTreeDragDrop.prototype.setDragHandleState = function () {
        var self = this;

        $('.drag-handle.drag-disabled', self.largetree.elt).removeClass('drag-disabled');
        $('.multiselected-row', self.largetree.elt).removeClass('multiselected-row');

        /* Mark the children of each selected row as unselectable */
        $(self.rowsToMove).each(function (idx, selectedRow) {
            var waypoint = $(selectedRow).next();

            while (waypoint.hasClass('waypoint')) {
                if (waypoint.hasClass('populated')) {
                    var startLevel = waypoint.data('level');

                    var elt = waypoint.next();
                    while (!elt.hasClass('end-marker') && elt.data('level') >= startLevel) {
                        elt.find('.drag-handle').addClass('drag-disabled');
                        elt = elt.next();
                    }

                    waypoint = elt.next();
                } else {
                    waypoint = waypoint.next();
                }
            }
        });

        /* Mark the ancestors of each selected row as unselectable */
        $(self.rowsToMove).each(function (idx, selectedRow) {
            var next = $(selectedRow);
            var level = next.data('level') - 1;

            while (level > 0) {
                next = next.prevAll('.largetree-node.indent-level-' + level + ':first');
                next.find('.drag-handle').addClass('drag-disabled');
                level -= 1;
            }
        });

        /* Highlight selected rows */
        $('.multiselected', self.largetree.elt).closest('tr').addClass('multiselected-row');

        self.refreshAnnotations();
    };

    LargeTreeDragDrop.prototype.refreshAnnotations = function() {
        var self = this;

        self.large_tree.elt.find('.drag-annotation').remove();
        self.rowsToMove.map(function (elt, idx) {
            var $annotation = $('<div>').addClass('drag-annotation');

            if (self.rowsToMove.length > 1) {
                /* Only show selection number if there's more than one selection. */
                $annotation.text(idx + 1);
            }

            $annotation.appendTo($(elt).find('td:first'));
        });
    };

    LargeTreeDragDrop.prototype.handleMultiSelect = function (selection) {
        var self = this;
        var row = selection.closest('tr');

        if (selection.hasClass('multiselected')) {
            /* deselect a selected item */
            self.rowsToMove = self.rowsToMove.filter(function (elt) {
                return (elt != row[0]);
            });

            selection.removeClass('multiselected');
        } else {
            /* Add this item to the selection */
            selection.addClass('multiselected');
            self.rowsToMove.push(row[0]);
        }

        self.setDragHandleState();

        return false;
    };

    LargeTreeDragDrop.prototype.handleShiftSelect = function (selection) {
        var self = this;

        var row = selection.closest('tr');
        var lastSelection = self.rowsToMove[self.rowsToMove.length - 1]

        if (lastSelection) {
            var start = $(lastSelection);
            var end = row;

            if (start.index() > end.index()) {
                /* Oops.  Swap them. */
                var tmp = end;
                end = start;
                start = tmp;
            }

            var rowsInRange = start.nextUntil(end).andSelf().add(end);
            var targetLevel = $(lastSelection).data('level');

            rowsInRange.each(function (i, row) {
                if ($(row).is('.largetree-node')) {
                    if (!$(row).is('.multiselected') && $(row).data('level') === targetLevel) {
                        $(row).find('.drag-handle').addClass('multiselected')
                        self.rowsToMove.push(row);
                    }
                }
            });

            self.rowsToMove = $.unique(self.rowsToMove);

            self.setDragHandleState();
        }

        return false;
    };

    LargeTreeDragDrop.prototype.initialize = function (largetree) {
        var self = this;

        self.largetree = largetree;

        largetree.addPopulateWaypointHook(function () {
            /* Make sure none of the descendants of any multi-selected node can
               be selected */
            self.setDragHandleState();
        });

        $(largetree.elt).on('mousedown', '.drag-handle', function (event) {
            var selection = $(this);

            if (event.ctrlKey || event.metaKey) {
                return self.handleMultiSelect(selection);
            } else if (event.shiftKey) {
                return self.handleShiftSelect(selection);
            }

            self.dragDelayTimer = setTimeout(function () {
                self.dragDelayTimer = undefined;

                /* Start a drag of one or more items */
                var row = selection.closest('tr');

                if ($('.multiselected', largetree.elt).length > 0) {
                    if (!row.find('.drag-handle').hasClass('multiselected')) {
                        /* If the item we started dragging from wasn't part of
                           the multiselection, add it in. */
                        row.find('.drag-handle').addClass('multiselected');
                        self.rowsToMove.push(row[0]);
                    }
                } else {
                    /* We're just tragging a single row */
                    self.rowsToMove = [row[0]];
                    row.addClass('multiselected');
                }

                self.setDragHandleState();

                self.dragActive = true;

                self.scrollUpHotspot.width(largetree.elt.width()).height(HOTSPOT_HEIGHT);
                self.scrollDownHotspot.width(largetree.elt.width()).height(HOTSPOT_HEIGHT);

                self.scrollUpHotspot.css('top', largetree.elt.offset().top - HOTSPOT_HEIGHT)
                               .css('left', largetree.elt.offset().left);
                self.scrollDownHotspot.css('top', largetree.elt.offset().top + largetree.elt.height())
                                 .css('left', largetree.elt.offset().left);

                self.dragIndicator.empty().hide();
                self.dragIndicator.append($('<ol />').append(self.rowsToMove.map(function (elt, idx) {
                    return $('<li />').text($(elt).find('.title').text());
                })));


                $(largetree.elt).focus();

                $('body').prepend(self.dragIndicator);
                $('body').prepend(self.scrollUpHotspot);
                $('body').prepend(self.scrollDownHotspot);
            }, DRAG_DELAY);

            return false;
        });

        $(document).on('mousedown', function (event) {
            if (!event.ctrlKey &&
                /* Not clicking on a drag handle */
                !$(event.target).hasClass('drag-handle') &&

                /* Not operating the dropdown menu */
                $(event.target).closest('.largetree-dropdown-menu').length === 0 &&

                /* Not attempting to expand something */
                $(event.target).closest('.expandme').length === 0 &&

                /* Not attempting to click a toolbar action */
                $(event.target).closest('#tree-toolbar').length === 0 &&

                /* Not using the resize handle */
                $(event.target).closest('.ui-resizable-handle').length === 0) {

                $(largetree.elt).find('.multiselected').removeClass('multiselected');
                self.rowsToMove = [];

                self.setDragHandleState();
            }
        });

        $(document).on('mousemove', function (event) {
            if (self.dragActive) {
                self.lastCursorPosition = {x: event.clientX, y: event.clientY};

                self.dragIndicator[0].style.left = (event.clientX + MOUSE_OFFSET) + 'px';
                self.dragIndicator[0].style.top = (event.clientY + MOUSE_OFFSET) + 'px';
                self.dragIndicator[0].style.display = 'inline-block';
            }
        });

        $(largetree.elt).on('mouseout', '.expandme', function (event) {
            if (self.expandTimer) {
                clearTimeout(self.expandTimer);
                self.expandTimer = undefined;
            }
        });

        $(largetree.elt).on('mouseover', '.expandme', function (event) {
            var button = $(this);

            if (self.dragActive && button.find('.expanded').length === 0) {
                self.expandTimer = setTimeout(function () {
                    largetree.toggleNode(button);
                }, EXPAND_DELAY);
            }
        });

        $(largetree.elt).on('mouseenter', 'tr.root-row, tr.largetree-node', function (event) {
            if (self.dragActive) {
                if (self.isDropAllowed($(this))) {
                    $(this).addClass('drag-drop-over');
                } else {
                    $(this).addClass('drag-drop-over-disallowed');
                }
            }
        });

        $(largetree.elt).on('mouseleave', 'tr.root-row, tr.largetree-node', function (event) {
            if (self.dragActive) {
                $(this).removeClass('drag-drop-over').
                        removeClass('drag-drop-over-disallowed');
            }
        });

        $(document).on('mouseenter', '.tree-scroll-hotspot', function (event) {
            var hotspot = event.target;

            var direction = 1;

            if ($(hotspot).hasClass('tree-scroll-up-hotspot')) {
                direction = -1;
            }

            var hotspotBounds = hotspot.getBoundingClientRect();
            self.autoScrollTimer = setInterval(function () {
                if (self.lastCursorPosition) {
                    var scrollAcceleration = (self.lastCursorPosition.y - hotspotBounds.top) / hotspotBounds.height;

                    if (direction == -1) {
                        scrollAcceleration = (1 - scrollAcceleration);
                    }

                    /* Go faster/slower at the two extremes */
                    if (scrollAcceleration > 0.8) {
                        scrollAcceleration += 0.1;
                    }

                    if (scrollAcceleration < 0.2) {
                        scrollAcceleration = 0.05;
                    }

                    var position = $(largetree.elt).scrollTop();

                    $(largetree.elt).scrollTop(position + (direction * AUTO_SCROLL_SPEED * scrollAcceleration));
                }
            }, 50);
        });

        $(document).on('mouseout', '.tree-scroll-hotspot', function (event) {
            if (self.autoScrollTimer) {
                clearTimeout(self.autoScrollTimer);
            }
            self.autoScrollTimer = undefined;
        });


        $(document).on('mouseup', function (event) {
            if (self.dragActive) {
                self.dragActive = false;
                self.dragIndicator.remove();
                $(largetree.elt).find('.drag-drop-over').removeClass('drag-drop-over');
                $(largetree.elt).find('.drag-drop-over-disallowed').removeClass('drag-drop-over-disallowed');
                $(largetree.elt).find('.multiselected').removeClass('multiselected');

                if (self.autoScrollTimer) {
                    clearTimeout(self.autoScrollTimer);
                    self.autoScrollTimer = undefined;
                }

                $(document).find('.tree-scroll-hotspot').remove();

                var dropTarget = $(event.target).closest('tr.largetree-node,tr.root-row');

                /* If they didn't drop on a row, that's a cancel. */
                if (dropTarget.length > 0 && self.isDropAllowed(dropTarget)) {
                    self.handleDrop(dropTarget);
                } else {
                    self.rowsToMove = [];
                }

                self.setDragHandleState();

                event.preventDefault();
                return false;
            }

            if (self.dragDelayTimer) {
                /* The mouse click finished prior to our drag starting (so we've
                   received a click, not a drag) */

                clearTimeout(self.dragDelayTimer);
                self.dragDelayTimer = undefined;

                /* Deselect everything */
                self.resetState();

                self.handleMultiSelect($(event.target));
            }

            return true;
        });
    };


    LargeTreeDragDrop.prototype.resetState = function () {
        var self = this;

        $(self.largetree.elt).find('.multiselected').removeClass('multiselected');

        self.rowsToMove = [];

        if (self.blockout) {
            self.blockout.remove();
            self.blockout = undefined;
        }

        if (self.menu) {
            self.menu.remove();
            self.menu = undefined;
        }
        self.setDragHandleState();
    };

    LargeTreeDragDrop.prototype.handleDrop = function (dropTarget) {
        var self = this;

        // blockout the page
        self.blockout = $('<div>').addClass('largetree-blockout');
        $(document.body).append(self.blockout);
        
        // insert a menu!
        self.menu = $('<ul>').addClass('dropdown-menu largetree-dropdown-menu');
        if (!dropTarget.is('.root-row')) {
            self.menu.append($('<li><a href="javascript:void(0)" class="add-items-before"><%= I18n.t('tree.drag_and_drop_actions.before') %></a></li>'));
        }

        self.menu.append($('<li><a href="javascript:void(0)" class="add-items-as-children"><%= I18n.t('tree.drag_and_drop_actions.as_child') %></a></li>'));

        if (!dropTarget.is('.root-row')) {
            self.menu.append($('<li><a href="javascript:void(0)" class="add-items-after"><%= I18n.t('tree.drag_and_drop_actions.after') %></a></li>'));
        }

        $(document.body).append(self.menu);
        self.menu.css('position','absolute');
        self.menu.css('top',dropTarget.offset().top + dropTarget.height());
        self.menu.css('left',dropTarget.offset().left);
        self.menu.css('z-index', 1000);
        self.menu.show();
        self.menu.find('a:first').focus();
        self.menu.on('keydown', function(event) {
            if (event.keyCode == 27) { //escape
                self.resetState();
                return false;
            } else if (event.keyCode == 38) { //up arrow
                if ($(event.target).closest('li').prev().length > 0) {
                    $(event.target).closest('li').prev().find('a').focus();
                }
                return false;
            } else if (event.keyCode == 40) { //down arrow
                if ($(event.target).closest('li').next().length > 0) {
                    $(event.target).closest('li').next().find('a').focus();
                }
                return false;
            }

            return true;
        });

        self.blockout.on('click', function() {
            self.resetState();
        });

        function getParent(node) {
            return node.prevAll('.indent-level-'+(node.data('level') - 1) + ':first');
        }

        self.menu.on('click', '.add-items-before', function() {
            self.largetree.reparentNodes(getParent(dropTarget), self.rowsToMove, dropTarget.data('position')).done(function() {
                self.resetState();
            });
        }).on('click', '.add-items-as-children', function() {
            self.largetree.reparentNodes(dropTarget, self.rowsToMove, dropTarget.data('child_count')).done(function() {
                self.resetState()
            });
        }).on('click', '.add-items-after', function() {
            self.largetree.reparentNodes(getParent(dropTarget), self.rowsToMove, dropTarget.data('position') + 1).done(function() {
                self.resetState()
            });
        });
    };

    LargeTreeDragDrop.prototype.simulate_drag_and_drop = function(source_tree_id, target_tree_id) {
        var source = $('#' + source_tree_id);
        var target = $('#' + target_tree_id);

        this.rowsToMove = [source];
        this.handleDrop(target);
    };

    exports.LargeTreeDragDrop = LargeTreeDragDrop;
    exports.DRAGDROP_HOTSPOT_HEIGHT = HOTSPOT_HEIGHT

}(window));
