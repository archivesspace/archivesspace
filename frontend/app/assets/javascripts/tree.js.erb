//= require jquery.cookie
//= require jquery.ba-hashchange
//= require jquery.hotkeys
//= require jstree
//= require jstree.primary_selected
//= require jstree.select_limit


$(function() {
  var tree;
  var $tree = $("#archives_tree"),
    $container = $("#object_container"),
    $toolbar = $("#archives_tree_toolbar");

  if($tree.length === 0) {
    return;
  }


  var moved_nodes = [];
  var move_timeout = null;

  // use of loadedrecordform event to ok tree tweaks
  $(document).bind("loadedrecordform.aspace", function() {
    if (!config.read_only) {
      AS.tree_data.moveable = true;
    }
  });

  if ($tree.length < 1) {
    return;
  }

  var path_to_node;

  var config = {
    root_object_id: $tree.data("root-id"),
    root: $tree.data("root"),
    root_node_type: $tree.data("root-node-type"),
    read_only: $(".archives-tree").data("read-only"),
    rules: $(".archives-tree").data("rules")
  };

  var initForm = function(html) {
    $container.html(html);

    var $form = $("form", $container);

    // if (location.hash !== "#tree::new") {
      $form.data("form_changed", false);
      $(".btn-primary", $form).attr("disabled", "disabled");
      $(".btn-cancel", $form).attr("disabled", "disabled");
    // } else {
    //   $form.data("form_changed", true);
    // }


    $form.on("formchanged.aspace", function() {

      $(".btn-primary", $form).removeAttr("disabled");
      $(".btn-cancel", $form).removeAttr("disabled");
    });

    $form.on("formreverted.aspace", function(event, data) {

      if ($("form", $container).data("form_changed")) {

        var p = confirmChanges(tree.get_primary_selected());
        p.done(function(proceed) {
        if(proceed) {
          $(window).trigger('hashchange');
          $.scrollTo("header")
        }
        return;
        });
      }

    });


    $(".btn-plus-one", $form).click(function() {
      var createPlusOne = function(event, data) {
        if (data.success) {
          $(".archives-tree-container .add-sibling").trigger("click");
        }
      };

      $form.data("createPlusOne", true);

      $container.one("submitted", createPlusOne);
      $form.triggerHandler("submit");
    });


    // Move the loadedrecordform.aspace event to be before
    // the ajaxForm is attached, so events (like the session check)
    // can be bound to the form first.
    // See form.js
    $(document).triggerHandler("loadedrecordform.aspace", [$container]);


    // We handle form reverts ourselves.
    // There's a revert button above...
    $(".record-toolbar .revert-changes .btn", $form).off().click(function(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      $form.trigger("formreverted.aspace");

      });

    // ..and another down below
    $(".btn-cancel", $form)
      .html(AS.renderTemplate("tree_revert_changes_label_template"))
      .off()
      .click(function(event) {
        // scroll back to the top

        event.preventDefault();
        event.stopImmediatePropagation();
        $form.trigger("formreverted.aspace");
      });


    $form.ajaxForm({
      data: {
        inline: true
      },
      beforeSubmit: function(arr, $form) {
        $(".btn-primary", $form).attr("disabled","disabled");

        if ($form.data("createPlusOne")) {
          arr.push({
            name: "plus_one",
            value: "true",
            required: false,
            type: "text"
          });
        }
      },
      success: function(response, status, xhr) {
        var $form = initForm(response);

        if ($form.data('formErrors')) {
          $container.triggerHandler("submitted", {success: false});
          $form.data("form_changed", true);
          $(".btn-primary, .btn-cancel", $form).removeAttr("disabled");
        } else {
          $form.data("form_changed", false);

          $container.triggerHandler("submitted", {success: true});
        }

        if ( $form.data('"update-monitor-paused"') ) {
          $form.data("update-monitor-paused", false);
        }

        // scroll back to the top
        $.scrollTo("header");
      },
      error: function(obj, errorText, errorDesc) {
        $container.prepend("<div class='alert alert-error'><p>An error occurred saving this record.</p><pre>"+errorDesc+"</pre></div>");
        $container.triggerHandler("submitted", {success: false});
        $(".btn-primary", $form).removeAttr("disabled");
      }
    });

    AS.resetScrollSpy();

    return $form;
  };

  var insertLoadingMessage = function() {
    var loadingMsgEl = $(AS.renderTemplate("tree_loading_notice_template"));
    loadingMsgEl.hide();
    $container.prepend(loadingMsgEl);
    loadingMsgEl.fadeIn();
    $(":input", $container).attr("disabled","disabled");
  };


  var extractNode = function(data, url) {
    var node_uri = url.match(/node_uri=([^&]*)/gm)[0].replace("node_uri=", "")

    if (node_uri === 'root') {
      return data;
    } else if (node_uri === data.record_uri) {
      return (typeof(data.children) === 'object' && data.children.length > 0) ? data.children : []
    } else if (_.isUndefined(data)) {
      return false;
    } else {
      return extractNode(_.find(data.children, function(child) {
        return (typeof(child.children) === 'object' && child.children.length > 0);
      }), url);
    }
  };


  var getPrimarySelectedNode = function() {
    return tree.get_primary_selected_dom();
  };

  var getCurrentPath = function() {
    return tree.get_path(tree.get_primary_selected(), false, true);
  };

  var getSelectedNodes = function(full, sorted) {
    full = full || false;
    var nodes = tree.get_selected(full);

    if (full && sorted) {
      return _.sortBy(nodes, function(node) {
        return getNodePosition(node);
      });
    } else {
      return nodes;
    }
  };

  var getNodePosition = function(obj) {
    obj = _.isString(obj) ? tree.get_node(obj) : obj

    if (!obj.parent) {
      return false;
    }

    return _(tree.get_node(obj.parent).children)
      .findIndex(function(childId) {
        return childId === obj.id;
      });
  };

    var removeLoadingMessage = function() {
      var loadingMsgEl = $('.tree-loading-notice')
      loadingMsgEl.fadeOut();
      loadingMsgEl.remove();
      $(":input", $container).removeAttr("disabled");
    };

  var isLastSibling = function(node) {
    node = _.isString(node) ? tree.get_node(node) : node
    return getNodePosition(node) > (tree.get_node(node.parent).children.length -2);
  }

  var previousSibling = function(node) {
    return tree.get_node(node.parent).children[getNodePosition(node) - 1]
  }

  var nextSibling = function(node) {
    return tree.get_node(node.parent).children[getNodePosition(node) + 1]
  }

  var loadPaneForNode = function(node) {
   var nodeEl = tree.get_node(node, true);

    insertLoadingMessage();

    if (config.read_only) {

      var params = {};
      params.inline = true;
      params[config.root_node_type+"_id"] = config.root_object_id;

      $.ajax({
        url: APP_PATH+node.type+"s/"+node.id.replace(/.*_/, ''),
        type: 'GET',
        data: params,
        success: function(html) {
          $container.html(html);
          AS.resetScrollSpy();
          $(document).trigger("loadedrecordform.aspace", [$container]);
        },
        error: function(obj, errorText, errorDesc) {
          $container.html("<div class='alert alert-error'><p>An error occurred loading this form.</p><pre>"+errorDesc+"</pre></div>");
        }
      });

      return;
    }

    if (node.id === "new") {

      var data = {
        inline: true
      };
      data[config.root_node_type + "_id"] = config.root_object_id;

      var $parentNodeEl = nodeEl.parents("li:first");
      if ($parentNodeEl.attr("rel") === nodeEl.attr("rel")) {
        data[$parentNodeEl.attr("rel") + "_id"] = $parentNodeEl.data("id");
      }

      if (nodeEl.data("params")) {
        data = $.extend({}, data, nodeEl.data("params"));
      }

      $.ajax({
        url: APP_PATH + node.type + "s/new",
        data: data,
        type: "GET",
        success: function(html) {
          initForm(html);
//          $("form", $container).triggerHandler("formchanged.aspace");
        },
        error: function() {
          $container.html("<div class='alert alert-error'><p>An error occurred loading this form.</p><pre>"+errorDesc+"</pre></div>");
        }
      });
    } else if (node.type) {
      $.ajax({
        url: APP_PATH+node.type+"s/"+node.id.replace(/.*_/,'')+"/edit?inline=true",
        success: function(html) {
          initForm(html);
        },
        error: function(obj, errorText, errorDesc) {
          $container.html("<div class='alert alert-error'><p>An error occurred loading this record.</p><pre>"+errorDesc+"</pre></div>");
        }
      });
    }
  };


  var renderTreeNodeNavigation = function(event) {
    var node = tree.get_primary_selected(true);

    var data = { config: config }
    var indexOfCurrentNode = getNodePosition(node);

    if (indexOfCurrentNode && indexOfCurrentNode !== 0) {
      data.previous = previousSibling(node);
    } else if (node.parent) {
      data.previous = node.parent
    }

    if (node.children && node.children.length > 0) {
      data.next = node.children[0];
    } else if (!isLastSibling(node)) {
      data.next = nextSibling(node);
    }

    $(".btn-toolbar", $toolbar).append(AS.renderTemplate("tree_nodenavigation_toolbar_template", data));
  };


  var loadTreeActionsForNode = function(node) {
    var node = tree.get_node(node);
    var nodeEl = tree.get_node(node, true);
    // render tree toolbar
    $toolbar.html(AS.renderTemplate("tree_toolbar_template"));
    renderTreeNodeNavigation();
    if (config.read_only !== true && nodeEl.attr("id") != "new") {
      var data_for_toolbar = {
        config: config,
        rules: config.rules[node.type],
        node_id: node.id.replace(/.*_/, ''),
        root_object_id: config.root_object_id,
        up_level: node.parents.length > 2
      };
      if (node.parent) {
        var parent = tree.get_node(tree.get_parent(node));
        data_for_toolbar.parent_id = parent.id;
        data_for_toolbar.parent = parent;
        data_for_toolbar.is_first = parent.children[0] === node.id;
        data_for_toolbar.is_last = _.last(parent.children) === node.id;
        data_for_toolbar.siblings = _(parent.children)
          .filter(function(sibling) {
            return sibling != node.id;
          })
          .map(function(sibling) {
            sibling = tree.get_node(sibling);
            return {
              id: sibling.id,
              title: sibling.original.title
            };
          }).value();
      }

      var $toolbarActions = $(AS.renderTemplate("tree_nodeactions_toolbar_template", data_for_toolbar));

      $(".btn-toolbar", $toolbar).append($toolbarActions);

      // init "close record" button
      var $closeRecordButton = $(AS.renderTemplate("tree_finish_action_template", data_for_toolbar));

      // check before closing a dirty form
      $closeRecordButton.click(function() {
        event.preventDefault();
        event.stopImmediatePropagation();

        var location = $('a', $(this)).attr('href');
        if ($("form", $container).data("form_changed")) {
          var p = confirmChanges(tree.get_primary_selected_dom());
          p.done(function(proceed) {
            if (proceed) {
              window.location = location;
            }
          });
        } else {
          window.location = location;
        }
      });

      $(document).on('formclosed.aspace',function() {
        $closeRecordButton.trigger("click");
      });

      $(".btn-toolbar", $toolbar).append($closeRecordButton);

      $('a', $toolbar).on("focus", function() {
        if ($(this).parents("li.dropdown-submenu").length) {
          $('.dropdown-menu', $(this).parent()).show();
        } else {
          $(".dropdown-submenu .dropdown-menu", $(this).parents(".nav")).css("display", "");
        }
      });

      $('.dropdown-submenu > a', $toolbar).on("keyup", function(event) {
        // right arrow focuses submenu
        if (event.keyCode === 39) {
          $('.dropdown-menu a:first', $(this).parent()).focus();
        }
      });
      $('.dropdown-submenu > .dropdown-menu > li > a', $toolbar).on("keyup", function() {
        // left arrow focuses parent menu
        if (event.keyCode === 37) {
          $("> a", $(this).parents(".dropdown-submenu:first")).focus();
        }
      });

      // init the cut and paste actions
      if ($tree.data("clipboard")) {
        // can't allow paste if clipped nodes are in current path
        if (!_.intersection(getCurrentPath(), $tree.data("clipboard")).length) {
          $(".paste-node", $toolbar).removeAttr("disabled").removeClass("disabled");
        }
      }

      $(".cut-node", $toolbar).removeAttr("disabled").removeClass("disabled");

      // toggle action disabled/enabled based on status of tree
      enableDisableToolbarActions();

      // init any widgets in the newly rendered toolbar
      $(document).trigger("loadedrecordform.aspace", [$toolbar]);
    }
  };


  var setHashForNode = function(node_id) {
    if (node_id.indexOf("tree::") < 0) {
      node_id = "tree::"+node_id;
    }
    location.hash = node_id;
  };


  var changeHashSilently = function(newHash) {
    $(window).data("ignore-hashchange", true);
    location.hash = newHash;
  };


  var onHashChange = function(){
    var currentlyFocusedSelector;

    // if a toolbar action is clicked, let's refocus it
    // up re-render (it will be replaced with a new toolbar
    // for the selected node)
    if ($(":focus").length > 0 && $(":focus").closest($toolbar).length > 0) {
      currentlyFocusedSelector = $(":focus").attr("class");
    }

    if ($(window).data("ignore-hashchange")) {
      $(window).data("ignore-hashchange", false);
      return;
    }

    if (!location.hash || location.hash.indexOf("tree::") === -1) {
      return;
    }

    var id_from_hash = location.hash.replace("#tree::", "");

    tree.set_primary_selected(id_from_hash);

    tree.primary(function(node) {
      if (!node.state.opened) {
        tree.open_node(node, function(node) {
          loadPaneForNode(node);
          loadTreeActionsForNode(node);
        });
      } else {
        loadPaneForNode(node);
        loadTreeActionsForNode(node);
      }
    });

    if (currentlyFocusedSelector) {
      var $target = $("[class='"+currentlyFocusedSelector+"']");

      if ($target.is("[disabled]")) {
        $(".btn:not([disabled]):first", $toolbar).focus();
      } else {
        $("[class='"+currentlyFocusedSelector+"']").focus();
      }
    }
  };


  var addnewNode = function(parent, newNodeType,  newNodeConfig, new_object_params) {
    var newNode = {
      id: "new",
      node_type: newNodeType,
      type: newNodeType,
      text: newNodeConfig.record_label,
      icon: 'glyphicon glyphicon-asterisk',
      a_attr: {
        "href": "#new"
      },
      li_attr: {
        "rel": newNodeType,
        "class": "new",
        "data-params": new_object_params ? new_object_params : ""
      }
    };

    var node_id = tree.create_node(parent, newNode, "last");

    setHashForNode("new");
  };


  var resizeArchivesTree = function() {
    var height = $("#archives_tree").parent().height() - $toolbar.outerHeight() - 21;
    $("#archives_tree").height(height);
  };


  var enableDisableToolbarActions = function() {
    if (tree.get_primary_selected(true).parents.length < 3) {
      $(".move-node-up-level", $toolbar).attr("disabled", "disabled").addClass("disabled");
    }
  };


  var addTreeEventBindings = function() {

    $(".archives-tree-container").on("click", ".add-child", function() {
      if (!tree.get_primary_selected())
        return;

      var parent = tree.get_primary_selected();
      var parentType = tree.get_primary_selected(true).original.type;

      addnewNode(parent, $(this).attr("rel"), config.rules[parentType].can_add_child);
    });

    $(".archives-tree-container").on("click", ".add-sibling", function() {
      if (!tree.get_primary_selected())
        return;

      var parent = tree.get_primary_selected(true).parent;
      var type = tree.get_primary_selected(true).type;

      var parentType = tree.get_node(parent).type;

      addnewNode(parent, type, config.rules[parentType].can_add_child);
    });

    $container.on("click", ".btn-cancel", function(event) {

      event.preventDefault();
      event.stopImmediatePropagation();
      if ($(this).attr("disabled")) {
        return;
      }

      if (getPrimarySelectedNode().attr("id") === "new") {
        setHashForNode(getPrimarySelectedNode().parents("li:first").attr("id"));
      } else {
        loadPaneForNode(tree.get_primary_selected(true));
      }
    });

    $(".archives-tree-container").on("click", ".expand-tree .btn", function() {
      $(".archives-tree-container").addClass("expanded");
      $(".archives-tree-container").animate({
        width: $(".archives-tree-container").parents(".container:first").width()-5
      }, 500);
    });

    $(".archives-tree-container").on("click", ".retract-tree .btn", function() {
      $(".archives-tree-container").animate({
        width: $(".archives-tree-container").parent().width()
      }, 500, function() {
        $(".archives-tree-container").removeClass("expanded");
        $(".archives-tree-container").css("width", "auto");
      });
    });


    $(".archives-tree-container").on("click", ".move-node", function(event) {
      event.preventDefault();
      event.stopPropagation();

      var nodesToMove = getSelectedNodes(true, true);
      var leadNode = nodesToMove[0];

      switch($(this).attr('rel')) {

      case "down":
        var targetParent = leadNode.parent
        var targetPosition = getNodePosition(leadNode) + nodesToMove.length + 1;

        tree.move_node(nodesToMove, targetParent, targetPosition);
        break;

      case "up":

        var targetParent = leadNode.parent
        var targetPosition = getNodePosition(leadNode) - 1;

        if (targetPosition > -1) {
          tree.move_node(nodesToMove, targetParent, targetPosition);
        }
        break;

      case "down-into":

        var targetParent = $(this).data("target-node-id");
        tree.move_node(nodesToMove, targetParent, 0);
        tree.open_node(targetParent);
        break;

        case "up-level":

        var targetParent = tree
          .get_path(leadNode, false, true).slice(-3, -2);
        tree.move_node(nodesToMove, targetParent, 0);

        break;
      }
    });


    // TRANSFER STUFF
    $(".archives-tree-container").on("click", ".transfer-node", function(event) {
      if ($(".tree-transfer-form", ".archives-tree-container")[0].style.display === "block") {

        $(".tree-transfer-form", ".archives-tree-container").css("display", "");
        $(".missing-ref-message", ".archives-tree-container .tree-transfer-form form").hide();
        $(".token-input-dropdown").hide();
      } else {
        $(".tree-transfer-form", ".archives-tree-container").css("display", "block");
        $(".tree-transfer-form form", ".archives-tree-container").unbind("submit").submit(function(event) {


          if ($(this).serializeObject()['transfer[ref]']) {
            // continue with the POST
            return;
          } else {
            event.stopPropagation();
            event.preventDefault();

            $(".missing-ref-message", ".archives-tree-container .tree-transfer-form form").show();
            return true;
          }
        });
        setTimeout(function() {
          $("#token-input-transfer_ref_", ".archives-tree-container").focus();
        });
      }
    });
    $(".archives-tree-container").on("click", ".tree-transfer-form :input", function(event) {
      event.stopPropagation();
    });
    $(".archives-tree-container").on("click", ".tree-transfer-form .dropdown-toggle", function(event) {
      event.stopPropagation();
      $(this).parent().toggleClass("open");
    });
    $(".archives-tree-container").on("click", ".tree-transfer-form .btn-cancel", function(event) {
      $(".tree-transfer-form", ".archives-tree-container").css("display", "");
      $(".transfer-node", ".archives-tree-container").parent().removeClass("open");
    });

    // Cut and Paste
    $(".archives-tree-container").on("click", ".cut-node", function(event) {
      event.preventDefault();
      if ($(this).hasClass("disabled")) {
        return;
      }

      _.forEach(tree.get_selected(), function(selected) {
        tree.get_node(selected, true).addClass("cut-to-clipboard");
      });

      $(".cut-to-clipboard", $tree).removeClass("cut-to-clipboard");

      $tree.data("clipboard", tree.get_selected());
      $(this).addClass("disabled").addClass("btn-success");
    }).on("click", ".paste-node", function(event) {
      event.preventDefault();
      if ($(this).hasClass("disabled") || !$tree.data("clipboard")) {
        return;
      }

      var target = tree.get_primary_selected();

      tree.move_node($tree.data("clipboard"), target);


      $tree.data("clipboard", null);
      $(this).addClass("disabled");
      $(".cut-to-clipboard", $tree).removeClass("cut-to-clipboard");
    });

    // Rapid Data Entry
    $(".archives-tree-container").on("click", ".add-children", function() {
      var $selected = getPrimarySelectedNode();
      if ($selected.length === 0) {
        return;
      }

      $(document).triggerHandler("rdeshow.aspace", [$selected, $(this)]);
    });


    $(window).hashchange(onHashChange);


    $("#archives_tree").scroll(function() {
      if ($(this).scrollTop() === 0) {
        $(this).removeClass("overflow");
      } else {
        $(this).addClass("overflow");
      }
    });

    if (AS.prefixed_cookie("archives-tree-container::height")) {
      $(".archives-tree-container").height(AS.prefixed_cookie("archives-tree-container::height"));
    } else {
      $(".archives-tree-container").height(AS.DEFAULT_TREE_PANE_HEIGHT);
    }

    $(".archives-tree-container").resizable({
      handles: "s",
      minHeight: 80,
      resize: function(event, ui) {
        AS.prefixed_cookie("archives-tree-container::height", ui.size.height);
        resizeArchivesTree();
        $(window).triggerHandler("resize.tree");
      }
    });

  };


  // In JSTree you say where, relative to the pre-op tree,
  // you want moving nodes to go, and it takes care of the rest.
  // In AS Backend you say where you want the moved nodes to
  // be in the tree after the move operation, and it takes care of the rest.
  // When JSTree is done it sends us this data and we need to translate.
  //
  // If the nodes moved 'down' (higher in the index),
  // the position of the first node in the data is:
  //   the former position of the node it bumped lower.
  // To translate this for ASpace:
  //   leader's position + the gap created by the splice - 1 for
  //   the node that slid lower in the index.

  var moveNodes = function(collectedMoveData) {

    //sanity check - shouldn't ever happen
    if (_.uniq(_.map(collectedMoveData, function(md) {
      return md.parent
    })).length > 1) {
      return false;
    }

    var targetNode = tree.get_node(collectedMoveData[0].parent);
    var targetNodeEl = tree.get_node(targetNode, true);

    // sort by position under the new parent
    collectedMoveData = _.sortBy(collectedMoveData, function(data) {
      return data.position;
    });

    var leader = collectedMoveData[0];
    var targetPosition = leader.position;

    // If we have moved a node downwards in the list... Since the
    // list will shift up as the node is plucked out, we need to
    // adjust the target index for this.
    if ((leader.parent === leader.old_parent) &&
        (leader.position > leader.old_position)) {
      targetPosition -= collectedMoveData.length - 1;
    }

    var urisOfNodesToMove = _.map(collectedMoveData, function(data) {
      return data.node.original.record_uri;
    });

    var data_for_post = {
      children: urisOfNodesToMove,
      index: targetPosition
    };

    // We need to lock down the form whil the move is happening....
    insertLoadingMessage();

    $.ajax({
      url: APP_PATH+targetNode.type+"s/"+targetNode.id.replace(/.*_/, '')+"/accept_children",
      type: "POST",
      data: data_for_post,
      success: function(data) {
        tree.refresh_primary_selected();

        tree.primary(function(node) {
          var nodeEl = tree.get_node(node, true);

        // If the reparented record's form is open, update its hidden field.
          if (urisOfNodesToMove.indexOf(node.original.record_uri) >= 0) {

            var hiddenInput = $("input.hidden-parent-uri", $container);

            if (targetNode.type === node.type) {
              hiddenInput.attr('name', node.type + '[parent][ref]');
              hiddenInput.val(targetNode.original.record_uri);
            } else {
              hiddenInput.attr('name', node.type + '[parent]');
              hiddenInput.val(null);
            }
          }

          // Always update the currently selected node's position.. it may have changed!
          $("#"+nodeEl.attr("rel")+"_position_", $container).val(nodeEl.index());

          // Let's unlock the form now
          removeLoadingMessage();

          // Also update the node's toolbar actions (as the move actions may have become out of sync)
          loadTreeActionsForNode(node);
        });

      },
      error: function(jqXHR, textStatus, errorThrown) {
        // Reset the tree.
        tree.refresh();

        // show a modal message
        AS.openQuickModal(AS.renderTemplate("tree_unable_to_move_message_template"), jqXHR.responseText);
      }
    });
  };


  var confirmChanges = function(target) {
    var node = tree.get_node(target);
    var targetNodeEl = tree.get_node(node, true);

    var d = $.Deferred();

    var parentIdFornew;
    if (targetNodeEl.attr("id") === "new") {
      parentIdFornew = targetNodeEl.parents("li:first").attr("id");
    }

    // open save your changes modal
    AS.openCustomModal("saveYourChangesModal", "Save Your Changes", AS.renderTemplate("save_changes_modal_template"));

    $("#saveChangesButton", "#saveYourChangesModal").on("click", function() {
      var $form = $("form", $container);

      $form.triggerHandler("submit");

      var onSubmitSuccess = function() {
        $form.data("form_changed", false);
        setHashForNode(node.id);
        $("#saveYourChangesModal").modal("hide");
        d.resolve(true);
      };

      var onSubmitError = function() {
        $("#saveYourChangesModal").modal("hide");
        d.resolve(false);
      };

      $container.one("submitted", function(event, data) {
        if (data.success) {
          onSubmitSuccess();
        } else {
          onSubmitError();
        }
      });
    });

    $("#dismissChangesButton", "#saveYourChangesModal").on("click", function() {
      $("form", $container).data("form_changed", false);
      if (targetNodeEl.attr("id") != "new") {
        $tree.jstree("delete_node", $('#new', $tree));
      }
//      setHashForNode(targetNodeEl.attr("id"));
      $("#saveYourChangesModal").modal("hide");
      d.resolve(true);
    });

    $(".btn-cancel", "#saveYourChangesModal").on("click", function() {
      if (targetNodeEl.attr("id") === "new") {
        $tree.jstree("delete_node", $('#new', $tree));
      }
      d.resolve(false);
    });

    return d.promise();
  };


  var onSelectNode = function() {

    $(".selected", $tree).removeClass("selected");

    if (tree.get_selected().length > 1) {
      $.each(tree.get_selected(), function(i, node_id) {
        tree.get_node(node_id, true).addClass("selected");
      });
      $tree.trigger("treemultipleselected.aspace");
    } else if (tree.get_selected().length === 1) {
      tree.set_primary_selected(tree.get_selected()[0]);

      var obj = tree.get_selected(true)[0];

      //open the node if it's closed
      if (!obj.state.opened) {
        tree.open_node(obj);
      }

      //wipe out any "new" nodes if they're
      //still hanging around
      if (obj.id != "new") {
        tree.delete_node("new");
      }

      setHashForNode(tree.get_primary_selected());

      tree.get_primary_selected_dom().addClass("selected");
      tree.hover_node(tree.get_primary_selected());
      $tree.trigger("treesingleselected.aspace");
    }
  }


  var initiallyOpenedNodes = function() {
    if (path_to_node) {
      return path_to_node;
    }
    if (location.hash) {
      var hash_id = location.hash.replace("tree::","");
      if (AS.tree_data.hasOwnProperty(hash_id.replace("#", ""))) {
        path_to_node = [];
        var node_id = hash_id.replace("#", "");
        while(true) {
          var node = AS.tree_data[node_id];
          path_to_node.push(node_id);
          if (node.hasOwnProperty("parent")) {
            node_id = node.parent;
          } else {
            path_to_node = path_to_node.reverse();
            path_to_node.pop();
            return path_to_node;
          }
        }
      }
    }
    return [];
  };

  var renderNodeText = function(data) {
    if (_.isArray(data)) {
      _.forEach(data, function(e) {
        renderNodeText(e);
      });
    } else {
      data.text = AS.renderTemplate("tree_node_" + data.node_type + "_template", {node: data});

      if(_.has(data, "children") && _.isArray(data.children)) {
        renderNodeText(data.children) ;
      }
    }
  }


  var initTree = function(onTreeLoadCallback) {
    AS.tree_data = {
      moveable: false
    };
    $tree.jstree({
      core: {
        data: function(obj, cb) {
          var url = $tree.data("tree-url");
          if (obj.id === '#') {
            url += "?node_uri=root&hash=" + location.hash.replace("#", "");
          } else {
            url += "?node_uri=" + obj.original.record_uri;
          }

          $.ajax(url, {
            success: function(data) {
              _.tap(extractNode(data, url), function(nodeAppendees) {
               renderNodeText(nodeAppendees);
                cb(nodeAppendees);
              });
            }
          });
        },
        check_callback: function(operation, node, node_parent, node_position) {
          switch(operation) {
          case "create_node":
            return AS.tree_data.moveable;
          case "rename_node":
            return AS.tree_data.moveable;
          case "move_node":
            return AS.tree_data.moveable;
          case "delete_node":
            return node.id === "new"
          default:
            return AS.tree_data.moveable;
          }
        },
        animation: 0,
        html_titles: true
      },
      types: {
        "default": {
          "icon" : "glyphicon glyphicon-file"
        },
        "archival_object": {
          "icon" : "glyphicon glyphicon-file"
        },
        "resource": {
          "icon" : "glyphicon glyphicon-list-alt"
        },
        "digital_object_component": {
          "icon" : "asicon icon-digital_object_component"
        },
        "digital_object": {
          "icon" : "asicon icon-digital_object"
        },
        "classification": {
          "icon" : "glyphicon glyphicon-file"
        },
        "classification_term": {
          "icon" : "glyphicon glyphicon-file"
        }
      },
      themes: {
        name: "default",
        url: false,
        dots: true
      },
      dnd: {
        drop_target : false,
        drag_target : false
      },
      ui: {
        selected_parent_close: false,
        selected_parent_open: true,
        select_limit: -1,
        // if OS X, use meta for single select (as ctrl used for menu)
        select_multiple_modifier: (navigator.appVersion.indexOf("Mac") != -1) ? "meta" : "ctrl",
        disable_selecting_children: true
      },
      crrm: {
        move: {
          check_move: function (m) {
            if ( config.read_only ) {
              return false;
            }
            // can't move top level parent
            if ($(m.o[0]).hasClass(config.root_node_type)) {
              return false;
            }

            // can't move to above the root child node
            if ($(m.np[0]).hasClass("archives-tree")) {
              return false;
            }

            return true;
          }
        }
      },

      hotkeys: {
        "up": false,
        "down": false,
        "ctrl+up": function() {
          $(".move-node-up",$toolbar).trigger("click");
        },
        "shift+up": false,
        "ctrl+down": function() {
          $(".move-node-down",$toolbar).trigger("click");
        },
        "shift+down": false,
        "ctrl+left": function() {
          $(".move-node-up-level",$toolbar).trigger("click");
        },
        "shift+left": false,
        "ctrl+right": function() {
          $($(".move-node-down-into",$toolbar)[getPrimarySelectedNode().index()]).trigger("click");
        },
        "shift+right": false,
        "space": false,
        "ctrl+space": false,
        "shift+space": false,
        "f2": false,
        "del": false,
        "return": function() {
          $('.jstree-hovered', $tree).trigger("click");
        }
      },
      plugins: [ "select_limit", "primary_selected", "types", "themes", "ui", "html_data", "crrm", "dnd", "hotkeys"]
    }).one("loaded.jstree", function() {

      tree = $tree.jstree(true);
      AS._tree = tree; //just for browser debugging

      if (location.hash) {
        var node_id = location.hash.replace("#tree::","");
        tree.select_node(node_id);
      }

      if (!tree.get_primary_selected()){
        if(tree.get_selected().length > 0) {
          tree.set_primary_selected(tree.get_selected()[0]);
        } else {
          tree.set_primary_selected('#');
        }
      }

      tree.primary(function(node) {
        tree.open_node(node);
        loadTreeActionsForNode(node);
      });

      onTreeLoadCallback();
    }).bind("select_node.jstree", function (event, data) {

      // if the form is dirty AND the selected node isn't the primary
      // then do a modal check
      if ($("form", $container).data("form_changed") && data.node.id != tree.get_primary_selected()) {
        var p = confirmChanges(tree.get_primary_selected());
        p.done(function(proceed) {
          if (proceed) {
            onSelectNode();
          } else {
            tree.refresh_primary_selected();
          }
        });
        p.fail(function(err) {
          console.log(err);
        });
      } else {
        onSelectNode();
      }

    }).bind("deselect_node.jstree", function (event, data) {
      var $node = $tree.jstree("get_node", data.node, true);
      if ($node.hasClass("primary-selected")) {
        // we don't want to allow deselection of the primary selected node
        $tree.jstree("select_node", $node);
      } else {
        $node.removeClass("selected");
      }

    }).bind("move_node.jstree", function(event, data) {
      if (move_timeout) { clearTimeout(move_timeout); }

      moved_nodes.push(data);
      move_timeout = setTimeout(function() {
        moveNodes(moved_nodes);
        onSelectNode();
      }, 50);


    }).bind("refreshtreenode.aspace", function(event, data) {
      var a_title = data.title || data.text;

      data.text = AS.renderTemplate("tree_node_" + data.node_type + "_template", {node: data});

      data.type = data.node_type

      var nodeId = data.jsonmodel_type+"_"+data.id;

      if (data.replace_new_node) {
        // drop the 'new' node and replace with a record node

        // This was added to make a test pass
        // but something is amiss somewhere
        if (data.uri && !data.record_uri) {
          data.record_uri = data.uri;
        }


        var isSelected = ("new" === tree.get_primary_selected());

        var anon_node = tree.get_node("new");
        var parent = anon_node.parent;

        data.a_attr = {
          "href": "#" + nodeId,
          "title": a_title
        }
        data.li_attr = {
          "data-id": data.id,
          "data-uri": data.uri,
          id: nodeId,
          rel: data.node_type
        }
        data.id = nodeId;

        tree.delete_node(anon_node);

        var node = tree.create_node(parent, data, "last", function(node) {

          if (isSelected) {
            tree.set_primary_selected(node);
          }

          changeHashSilently("#tree::"+nodeId);
          loadTreeActionsForNode(node);
        })

      } else {
        // rename the existing node
        tree.rename_node(nodeId, data.text);
        $('a', tree.get_node(nodeId, true)).attr('title', a_title);
        tree.refresh_primary_selected();
      }

    }).on("after_open.jstree", function(event, obj) {

      // make sure selected styles are there if the node was lazy-loaded
      var nodeEl = tree.get_primary_selected_dom();
      if (nodeEl && nodeEl.length) {
        nodeEl.addClass("primary-selected");
      }

    }).on("click", ".jstree-leaf a", function(event) {
      // only focus the tree node if the event originates
      // from a mouse click (otherwise it will be triggered
      // by another event).
      if (typeof event.isTrigger == "undefined") {
        $(this).focus();
      }
    });

  };

  initTree(function() {
    resizeArchivesTree();
    tree.primary(function(node) {
      loadPaneForNode(node);
      setTimeout(function(){
        $tree.scrollTo($("#" + node.id), 0, {
          offsetTop: $tree.height() / 2
        });
      },0);
    });
  });

  addTreeEventBindings();

  AS.refreshTreeNode = function(data) {
    $tree.triggerHandler("refreshtreenode.aspace", [data]);
  };

});
